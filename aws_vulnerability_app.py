import streamlit as st
import boto3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
import os
from dotenv import load_dotenv
import time
import random

# Load environment variables at the start
load_dotenv()

# Set page config FIRST - this must be the first Streamlit command
st.set_page_config(
    page_title="AWS Vulnerability Remediation AI",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS - after page config
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        color: #FF4B4B;
        text-align: center;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 800;
    }
    .sub-header {
        font-size: 1.4rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 300;
    }
    .severity-critical { 
        background: linear-gradient(135deg, #FF0000, #CC0000); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(255,0,0,0.3);
    }
    .severity-high { 
        background: linear-gradient(135deg, #FF4B4B, #FF0000); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(255,75,75,0.3);
    }
    .severity-medium { 
        background: linear-gradient(135deg, #FFA500, #FF8C00); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(255,165,0,0.3);
    }
    .severity-low { 
        background: linear-gradient(135deg, #008000, #006400); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(0,128,0,0.3);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }
    .metric-card:hover {
        transform: translateY(-5px);
    }
    .metric-value {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 10px 0;
    }
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    
    .service-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }
    .service-card:hover {
        transform: translateY(-3px);
        border-color: rgba(255,255,255,0.3);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .vulnerability-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-left: 5px solid;
        transition: all 0.3s ease;
    }
    .vulnerability-card:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    }
    
    .remediation-step {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 20px;
        margin: 15px 0;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .risk-assessment {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #ffc107;
    }
    
    .ai-insight {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #17a2b8;
    }
    
    .security-tip {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #28a745;
    }
    
    .credentials-status {
        background: linear-gradient(135deg, #e7f3ff 0%, #d1ebff 100%);
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #17a2b8;
        text-align: center;
    }
    
    .progress-bar {
        height: 8px;
        border-radius: 4px;
        background: #e9ecef;
        margin: 10px 0;
        overflow: hidden;
    }
    .progress-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.5s ease;
    }
    
    .chart-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .severity-bar {
        height: 30px;
        margin: 10px 0;
        border-radius: 15px;
        display: flex;
        align-items: center;
        padding: 0 15px;
        color: white;
        font-weight: bold;
        position: relative;
    }
    .severity-bar::after {
        content: attr(data-count);
        position: absolute;
        right: 15px;
    }
    
    .service-distribution {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 15px 0;
    }
    .service-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #667eea;
    }
</style>
""", unsafe_allow_html=True)

class AWSVulnerabilityApp:
    def __init__(self):
        # Initialize session state variables
        self._initialize_session_state()
        
        # Initialize AWS clients
        self.aws_clients = self._setup_aws_clients()
    
    def _initialize_session_state(self):
        """Initialize all session state variables"""
        defaults = {
            'scan_results': None,
            'selected_vulnerabilities': [],
            'remediation_results': {},
            'ai_analysis_cache': {},
            'remediation_plan': None,
            'selected_services': ['EC2', 'EKS', 'Lambda'],
            'scan_details': {},
            'execution_mode': 'dry-run',
            'security_score': 85,
            'last_scan_time': None,
            'trend_data': self._generate_trend_data()
        }
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value
    
    def _generate_trend_data(self):
        """Generate sample trend data for visualization"""
        dates = [(datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d') 
                for i in range(30, 0, -1)]
        return {
            'dates': dates,
            'vulnerabilities': [random.randint(5, 20) for _ in range(30)],
            'resources': [random.randint(50, 100) for _ in range(30)],
            'security_score': [random.randint(75, 95) for _ in range(30)]
        }
    
    def _setup_aws_clients(self):
        """Setup AWS clients - simplified for demo"""
        try:
            # This would be your actual AWS client setup
            # For demo, we'll return None to use sample data
            return None
        except:
            return None
    
    def run_comprehensive_scan(self, selected_services):
        """Run comprehensive security scan with enhanced visuals"""
        with st.spinner('üöÄ **Launching Comprehensive Security Assessment...**'):
            try:
                # Simulate scanning process with progress
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                steps = [
                    "üîç Initializing security scanner...",
                    "üñ•Ô∏è Scanning EC2 instances...", 
                    "‚ò∏Ô∏è Analyzing EKS clusters...",
                    "Œª Inspecting Lambda functions...",
                    "ü™£ Checking S3 buckets...",
                    "üë§ Reviewing IAM policies...",
                    "üìä Analyzing security findings...",
                    "ü§ñ Generating AI insights..."
                ]
                
                scan_details = {}
                for i, step in enumerate(steps):
                    status_text.text(f"**{step}**")
                    progress_bar.progress((i + 1) / len(steps))
                    time.sleep(0.5)  # Simulate work
                
                # Generate enhanced sample data
                resources, vulnerabilities = self._generate_enhanced_sample_data()
                
                st.session_state.scan_results = {
                    'resources': resources,
                    'vulnerabilities': vulnerabilities,
                    'scan_time': datetime.now().isoformat(),
                    'is_demo': True,
                    'scan_details': scan_details,
                    'total_resources': len(resources)
                }
                
                st.session_state.last_scan_time = datetime.now()
                st.session_state.security_score = max(0, 100 - len(vulnerabilities) * 2)
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ **Security Assessment Complete!**")
                
                # Show enhanced results summary
                self._show_scan_summary(resources, vulnerabilities)
                
            except Exception as e:
                st.error(f"‚ùå **Scan failed:** {str(e)}")
                self.run_basic_scan()
    
    def _generate_enhanced_sample_data(self):
        """Generate enhanced sample data with more realistic vulnerabilities"""
        resources = [
            {
                'resource_id': 'i-1234567890abcdef0',
                'resource_type': 'EC2',
                'service': 'EC2',
                'name': 'web-server-production',
                'state': 'running',
                'instance_type': 't3.large',
                'public_ip': '54.210.100.50',
                'launch_time': '2024-01-15 08:30:00',
                'vulnerabilities': [
                    {
                        'id': 'EC2-PUBLIC-IP',
                        'title': 'Publicly Accessible EC2 Instance',
                        'severity': 'HIGH',
                        'description': 'EC2 instance is directly accessible from the internet with a public IP address, increasing attack surface.',
                        'remediation': 'Move instance to private subnet and use Application Load Balancer for public access.',
                        'category': 'Network Security',
                        'risk_score': 85,
                        'compliance_standards': ['CIS AWS 1.4', 'PCI DSS 1.2'],
                        'attack_vectors': ['SSH Brute Force', 'Port Scanning'],
                        'business_impact': 'High - Potential data breach and service disruption',
                        'detection_time': '2 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Medium'
                    },
                    {
                        'id': 'EC2-SG-OPEN-SSH',
                        'title': 'SSH Port Open to Internet',
                        'severity': 'CRITICAL',
                        'description': 'Security group allows SSH access from any IP address (0.0.0.0/0), enabling potential unauthorized access.',
                        'remediation': 'Restrict SSH access to specific IP ranges and implement VPN or bastion host.',
                        'category': 'Network Security',
                        'risk_score': 95,
                        'compliance_standards': ['CIS AWS 4.1', 'NIST 800-53'],
                        'attack_vectors': ['SSH Brute Force', 'Credential Stuffing'],
                        'business_impact': 'Critical - Complete system compromise possible',
                        'detection_time': '1 hour ago',
                        'exploitability': 'Very Easy',
                        'remediation_complexity': 'Low'
                    }
                ]
            },
            {
                'resource_id': 'prod-eks-cluster-01',
                'resource_type': 'EKS',
                'service': 'EKS', 
                'name': 'production-kubernetes',
                'status': 'ACTIVE',
                'version': '1.28',
                'endpoint': 'https://xyz.gr7.us-east-1.eks.amazonaws.com',
                'vulnerabilities': [
                    {
                        'id': 'EKS-LOGGING-DISABLED',
                        'title': 'Control Plane Logging Disabled',
                        'severity': 'MEDIUM',
                        'description': 'EKS control plane logging is not enabled, limiting audit capability and security monitoring.',
                        'remediation': 'Enable all control plane log types (api, audit, authenticator, scheduler) for comprehensive monitoring.',
                        'category': 'Logging & Monitoring',
                        'risk_score': 45,
                        'compliance_standards': ['CIS Kubernetes 1.2.1'],
                        'attack_vectors': ['Lack of Audit Trail'],
                        'business_impact': 'Medium - Limited visibility into cluster activities',
                        'detection_time': '5 hours ago',
                        'exploitability': 'Difficult',
                        'remediation_complexity': 'Low'
                    }
                ]
            },
            {
                'resource_id': 'data-processor-function',
                'resource_type': 'Lambda',
                'service': 'Lambda',
                'name': 'customer-data-processor',
                'runtime': 'python3.9',
                'memory_size': 512,
                'timeout': 300,
                'vulnerabilities': [
                    {
                        'id': 'LAMBDA-ENV-SECRETS',
                        'title': 'Secrets in Environment Variables',
                        'severity': 'HIGH',
                        'description': 'Lambda function stores database credentials in plaintext environment variables.',
                        'remediation': 'Migrate secrets to AWS Secrets Manager and implement secret rotation.',
                        'category': 'Data Protection',
                        'risk_score': 75,
                        'compliance_standards': ['GDPR Article 32', 'HIPAA'],
                        'attack_vectors': ['Credential Theft', 'Environment Inspection'],
                        'business_impact': 'High - Potential PII data exposure',
                        'detection_time': '3 hours ago',
                        'exploitability': 'Medium',
                        'remediation_complexity': 'Medium'
                    }
                ]
            },
            {
                'resource_id': 'customer-data-bucket',
                'resource_type': 'S3',
                'service': 'S3',
                'name': 'customer-uploads-prod',
                'creation_date': '2024-01-10',
                'vulnerabilities': [
                    {
                        'id': 'S3-PUBLIC-READ',
                        'title': 'S3 Bucket Public Read Access',
                        'severity': 'HIGH',
                        'description': 'S3 bucket allows public read access, potentially exposing sensitive customer data.',
                        'remediation': 'Enable S3 Block Public Access and review bucket policies.',
                        'category': 'Data Protection',
                        'risk_score': 80,
                        'compliance_standards': ['GDPR Article 25', 'PCI DSS 3.2'],
                        'attack_vectors': ['Data Exfiltration', 'Unauthorized Access'],
                        'business_impact': 'High - Customer data exposure risk',
                        'detection_time': '4 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Low'
                    }
                ]
            }
        ]
        
        vulnerabilities = []
        for resource in resources:
            for vuln in resource.get('vulnerabilities', []):
                vuln_data = vuln.copy()
                vuln_data['resource_id'] = resource['resource_id']
                vuln_data['resource_type'] = resource['resource_type']
                vuln_data['resource_name'] = resource.get('name', resource['resource_id'])
                vuln_data['service'] = resource.get('service', 'Unknown')
                vulnerabilities.append(vuln_data)
        
        return resources, vulnerabilities
    
    def _show_scan_summary(self, resources, vulnerabilities):
        """Display enhanced scan summary"""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üìä</div>
                <div class="metric-label">Resources Scanned</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(len(resources)), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üö®</div>
                <div class="metric-label">Vulnerabilities Found</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(len(vulnerabilities)), unsafe_allow_html=True)
        
        with col3:
            critical_count = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üî•</div>
                <div class="metric-label">Critical Issues</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(critical_count), unsafe_allow_html=True)
        
        with col4:
            security_score = st.session_state.security_score
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">üõ°Ô∏è</div>
                <div class="metric-label">Security Score</div>
                <div class="metric-value">{security_score}/100</div>
            </div>
            """, unsafe_allow_html=True)
    
    def run_basic_scan(self):
        """Basic scan with minimal sample data"""
        resources, vulnerabilities = self._generate_enhanced_sample_data()
        
        st.session_state.scan_results = {
            'resources': resources,
            'vulnerabilities': vulnerabilities,
            'scan_time': datetime.now().isoformat(),
            'is_demo': True
        }
        
        st.session_state.security_score = 78
    
    def display_dashboard(self):
        """Main dashboard with enhanced visuals"""
        st.markdown('<h1 class="main-header">üõ°Ô∏è AWS Vulnerability Remediation AI</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Enterprise Cloud Security with AI-Powered Threat Intelligence</p>', unsafe_allow_html=True)
        
        # Display security overview
        self._display_security_overview()
        
        # Main content area
        if st.session_state.scan_results is None:
            self.display_welcome()
        else:
            self.display_enhanced_results()
    
    def _display_security_overview(self):
        """Display security overview metrics"""
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            if st.session_state.last_scan_time:
                last_scan = st.session_state.last_scan_time.strftime('%Y-%m-%d %H:%M')
                st.info(f"**Last Assessment:** {last_scan} | **Mode:** {'üî¨ Demo' if not self.aws_clients else 'üöÄ Live'}")
            else:
                st.info("**Ready for security assessment** | **Mode:** üî¨ Demo")
        
        with col2:
            if st.button("üîÑ Quick Scan", use_container_width=True):
                self.run_basic_scan()
                st.rerun()
        
        with col3:
            if st.button("üöÄ Full Assessment", use_container_width=True, type="primary"):
                self.run_comprehensive_scan(['EC2', 'EKS', 'Lambda'])
                st.rerun()
    
    def display_welcome(self):
        """Enhanced welcome screen"""
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("""
            <div style='text-align: center; padding: 20px;'>
                <h2 style='color: #333; margin-bottom: 10px;'>üîç Comprehensive Cloud Security</h2>
                <p style='color: #666; font-size: 1.1rem;'>AI-powered vulnerability detection and automated remediation for your AWS environment</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Enhanced service cards
            st.subheader("üéØ Protected Services")
            services = [
                ("üñ•Ô∏è", "EC2", "Compute Security", "Instances, AMIs, Security Groups"),
                ("‚ò∏Ô∏è", "EKS", "Kubernetes Security", "Clusters, Pods, RBAC"),
                ("Œª", "Lambda", "Serverless Security", "Functions, Permissions, Runtime"),
                ("ü™£", "S3", "Storage Security", "Buckets, Encryption, Access"),
                ("üë§", "IAM", "Access Security", "Users, Roles, Policies"),
                ("üåê", "VPC", "Network Security", "Subnets, NACLs, Flow Logs")
            ]
            
            # Display services in a 3x2 grid
            cols = st.columns(3)
            for i, (icon, name, title, desc) in enumerate(services):
                with cols[i % 3]:
                    st.markdown(f"""
                    <div class="service-card">
                        <h3 style='margin: 0; font-size: 2rem;'>{icon}</h3>
                        <h4 style='margin: 5px 0;'>{name}</h4>
                        <p style='margin: 5px 0; font-weight: 600;'>{title}</p>
                        <small style='opacity: 0.9;'>{desc}</small>
                    </div>
                    """, unsafe_allow_html=True)
        
        with col2:
            # Security insights and AI features
            st.markdown("""
            <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; padding: 30px; border-radius: 15px; margin-bottom: 20px;'>
                <h3 style='color: white; margin-bottom: 15px;'>ü§ñ AI-Powered Security</h3>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üîç</span>
                    <span>Intelligent Vulnerability Detection</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>‚ö°</span>
                    <span>Automated Remediation Plans</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üìä</span>
                    <span>Risk-Based Prioritization</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üõ°Ô∏è</span>
                    <span>Compliance Monitoring</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Quick start actions
            st.markdown("""
            <div class="security-tip">
                <h4>üöÄ Get Started</h4>
                <p>Run a security assessment to discover vulnerabilities and get AI-powered remediation guidance.</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("üéØ Start Security Assessment", use_container_width=True, type="primary"):
                self.run_comprehensive_scan(['EC2', 'EKS', 'Lambda'])
                st.rerun()
    
    def display_enhanced_results(self):
        """Display enhanced results with tabs and visualizations"""
        resources = st.session_state.scan_results['resources']
        vulnerabilities = st.session_state.scan_results['vulnerabilities']
        
        # Create tabs for different views
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Dashboard", 
            "üö® Vulnerabilities", 
            "üîß Resources", 
            "ü§ñ AI Analysis",
            "‚ö° Remediation"
        ])
        
        with tab1:
            self._display_dashboard_tab(resources, vulnerabilities)
        
        with tab2:
            self._display_vulnerabilities_tab(vulnerabilities)
        
        with tab3:
            self._display_resources_tab(resources)
        
        with tab4:
            self._display_ai_analysis_tab(vulnerabilities)
        
        with tab5:
            self._display_remediation_tab(vulnerabilities)
    
    def _display_dashboard_tab(self, resources, vulnerabilities):
        """Enhanced dashboard with visualizations"""
        st.header("üìä Security Dashboard")
        
        # Top metrics row
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            self._create_metric_card("üìà", "Resources", len(resources), "#667eea")
        with col2:
            self._create_metric_card("üö®", "Vulnerabilities", len(vulnerabilities), "#ff6b6b")
        with col3:
            critical = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            self._create_metric_card("üî•", "Critical", critical, "#ff4757")
        with col4:
            self._create_metric_card("üõ°Ô∏è", "Security Score", f"{st.session_state.security_score}/100", "#2ed573")
        
        # Charts and visualizations
        col1, col2 = st.columns(2)
        
        with col1:
            self._create_severity_chart(vulnerabilities)
        
        with col2:
            self._create_service_distribution_chart(resources)
        
        # AI Insights
        st.markdown("---")
        st.subheader("ü§ñ AI Security Insights")
        
        insights = [
            "**üîç Pattern Detection:** Multiple EC2 instances with public IPs detected. Consider implementing a bastion host pattern.",
            "**‚ö° Quick Wins:** 3 critical vulnerabilities can be remediated automatically with minimal impact.",
            "**üìà Trend Analysis:** Security score improved by 12% compared to last assessment.",
            "**üõ°Ô∏è Recommendations:** Enable AWS Security Hub for continuous monitoring and automated compliance checks.",
            "**üí∞ Cost Impact:** Remediating these issues could prevent potential losses of ~$50K annually.",
            "**‚è±Ô∏è Time to Remediate:** Estimated 2.5 hours for all critical and high severity issues."
        ]
        
        for insight in insights:
            st.markdown(f"""
            <div class="ai-insight">
                <p>{insight}</p>
            </div>
            """, unsafe_allow_html=True)
    
    def _create_metric_card(self, icon, label, value, color):
        """Create a metric card"""
        st.markdown(f"""
        <div class="metric-card" style="background: linear-gradient(135deg, {color}, {color}dd);">
            <div class="metric-value" style="font-size: 2rem;">{icon}</div>
            <div class="metric-label">{label}</div>
            <div class="metric-value" style="font-size: 2.2rem;">{value}</div>
        </div>
        """, unsafe_allow_html=True)
    
    def _create_severity_chart(self, vulnerabilities):
        """Create severity distribution chart using HTML/CSS"""
        severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
        for vuln in vulnerabilities:
            severity_counts[vuln['severity']] += 1
        
        total = sum(severity_counts.values())
        if total == 0:
            st.info("No vulnerabilities found")
            return
        
        st.markdown("""
        <div class="chart-container">
            <h4>Vulnerability Severity Distribution</h4>
        """, unsafe_allow_html=True)
        
        colors = {
            'CRITICAL': '#ff4757',
            'HIGH': '#ff6b6b', 
            'MEDIUM': '#ffa502',
            'LOW': '#2ed573'
        }
        
        for severity, count in severity_counts.items():
            if count > 0:
                percentage = (count / total) * 100
                st.markdown(f"""
                <div style="margin: 10px 0;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span><strong>{severity}</strong></span>
                        <span>{count} ({percentage:.1f}%)</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {percentage}%; background: {colors[severity]};"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    def _create_service_distribution_chart(self, resources):
        """Create service distribution chart using HTML/CSS"""
        service_counts = {}
        for resource in resources:
            service = resource['service']
            service_counts[service] = service_counts.get(service, 0) + 1
        
        st.markdown("""
        <div class="chart-container">
            <h4>Resources by Service</h4>
            <div class="service-distribution">
        """, unsafe_allow_html=True)
        
        colors = ['#667eea', '#764ba2', '#f093fb', '#4ecdc4', '#ff6b6b', '#ffa502']
        
        for i, (service, count) in enumerate(service_counts.items()):
            color = colors[i % len(colors)]
            st.markdown(f"""
            <div class="service-item" style="border-left-color: {color};">
                <span><strong>{service}</strong></span>
                <span style="background: {color}; color: white; padding: 4px 12px; border-radius: 15px; font-weight: bold;">
                    {count}
                </span>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("</div></div>", unsafe_allow_html=True)
    
    def _display_vulnerabilities_tab(self, vulnerabilities):
        """Display vulnerabilities with enhanced details"""
        st.header("üö® Security Vulnerabilities")
        
        if not vulnerabilities:
            st.success("üéâ No vulnerabilities found! Your AWS environment is secure.")
            return
        
        # Severity filter
        col1, col2 = st.columns([3, 1])
        with col2:
            severities = list(set([v['severity'] for v in vulnerabilities]))
            selected_severities = st.multiselect(
                "Filter by Severity:",
                severities,
                default=severities
            )
        
        filtered_vulns = [v for v in vulnerabilities if v['severity'] in selected_severities]
        
        for idx, vuln in enumerate(filtered_vulns):
            border_color = {
                'CRITICAL': '#ff4757',
                'HIGH': '#ff6b6b', 
                'MEDIUM': '#ffa502',
                'LOW': '#2ed573'
            }.get(vuln['severity'], '#666')
            
            # Define text colors based on severity for better contrast
            severity_bg_color = {
                'CRITICAL': '#ff4757',
                'HIGH': '#ff6b6b',
                'MEDIUM': '#ffa502', 
                'LOW': '#2ed573'
            }.get(vuln['severity'], '#666')
            
            severity_text_color = {
                'CRITICAL': '#ffffff',
                'HIGH': '#ffffff',
                'MEDIUM': '#000000',
                'LOW': '#000000'
            }.get(vuln['severity'], '#ffffff')
            
            st.markdown(f"""
            <div class="vulnerability-card" style="border-left-color: {border_color}; background: #ffffff;">
                <div style="display: flex; justify-content: between; align-items: start;">
                    <div style="flex: 1;">
                        <h3 style="margin: 0 0 10px 0; color: #1a1a1a; font-weight: 600;">{vuln['title']}</h3>
                        <div style="display: flex; gap: 15px; margin-bottom: 10px; flex-wrap: wrap;">
                            <span class="severity-{vuln['severity'].lower()}" style="background: {severity_bg_color}; color: {severity_text_color}; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; font-weight: bold;">
                                {vuln['severity']}
                            </span>
                            <span style="background: #f8f9fa; color: #495057; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; border: 1px solid #dee2e6;">
                                {vuln['service']} - {vuln['resource_name']}
                            </span>
                            <span style="background: #fff3cd; color: #856404; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; border: 1px solid #ffeaa7;">
                                ‚è±Ô∏è {vuln.get('detection_time', 'Recently')}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div style="margin: 15px 0;">
                    <p style="margin: 0; color: #4a4a4a; line-height: 1.5; background: #f8f9fa; padding: 12px; border-radius: 6px;">{vuln['description']}</p>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0;">
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 6px;">
                        <strong style="color: #1a1a1a;">üîÑ Remediation:</strong>
                        <p style="margin: 5px 0; color: #155724; background: #d4edda; padding: 8px; border-radius: 4px; border-left: 3px solid #28a745;">{vuln['remediation']}</p>
                    </div>
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 6px;">
                        <strong style="color: #1a1a1a;">üìã Category:</strong>
                        <p style="margin: 5px 0; color: #495057;">{vuln['category']}</p>
                        <strong style="color: #1a1a1a;">üéØ Exploitability:</strong>
                        <p style="margin: 5px 0; color: #495057;">{vuln.get('exploitability', 'Medium')}</p>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 6px;">
                        <strong style="color: #1a1a1a;">üéØ Risk Score:</strong>
                        <div class="progress-bar" style="background: #e9ecef; border-radius: 10px; height: 8px; margin: 8px 0;">
                            <div class="progress-fill" style="width: {vuln.get('risk_score', 50)}%; background: {border_color}; height: 100%; border-radius: 10px;"></div>
                        </div>
                        <small style="color: #495057;">{vuln.get('risk_score', 50)}/100</small>
                    </div>
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 6px;">
                        <strong style="color: #1a1a1a;">üìä Compliance:</strong>
                        <p style="margin: 5px 0; font-size: 0.9rem; color: #495057;">
                            {', '.join(vuln.get('compliance_standards', ['N/A']))}
                        </p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Action buttons
            col1, col2, col3 = st.columns([2, 1, 1])
            with col1:
                if st.button(f"ü§ñ Analyze with AI", key=f"analyze_{idx}"):
                    if vuln not in st.session_state.selected_vulnerabilities:
                        st.session_state.selected_vulnerabilities.append(vuln)
                        st.success(f"‚úÖ Added to AI analysis queue!")
            with col2:
                if st.button(f"‚≠ê Select for Remediation", key=f"select_{idx}"):
                    if vuln not in st.session_state.selected_vulnerabilities:
                        st.session_state.selected_vulnerabilities.append(vuln)
                        st.success(f"‚úÖ Selected for remediation!")
            with col3:
                if st.button("üìã View Details", key=f"details_{idx}"):
                    st.json(vuln, expanded=False)
            
            st.markdown("---")
    
    def _display_resources_tab(self, resources):
        """Display resources with enhanced details"""
        st.header("üîß AWS Resources")
        
        for resource in resources:
            with st.expander(f"{resource['service']} - {resource.get('name', resource['resource_id'])}", expanded=False):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**üìã Basic Information**")
                    st.write(f"**Resource ID:** `{resource['resource_id']}`")
                    st.write(f"**Type:** {resource['resource_type']}")
                    st.write(f"**Service:** {resource['service']}")
                    st.write(f"**Name:** {resource.get('name', 'Unnamed')}")
                    
                    if resource.get('state'):
                        st.write(f"**State:** {resource['state']}")
                    if resource.get('status'):
                        st.write(f"**Status:** {resource['status']}")
                
                with col2:
                    st.write("**üîß Configuration**")
                    if resource['resource_type'] == 'EC2':
                        st.write(f"**Instance Type:** {resource.get('instance_type', 'N/A')}")
                        st.write(f"**Public IP:** {resource.get('public_ip', 'Not assigned')}")
                    elif resource['resource_type'] == 'EKS':
                        st.write(f"**Version:** {resource.get('version', 'N/A')}")
                        st.write(f"**Endpoint:** {resource.get('endpoint', 'N/A')}")
                    elif resource['resource_type'] == 'Lambda':
                        st.write(f"**Runtime:** {resource.get('runtime', 'N/A')}")
                        st.write(f"**Memory:** {resource.get('memory_size', 'N/A')} MB")
                
                # Vulnerabilities section
                if resource.get('vulnerabilities'):
                    st.write("**üö® Security Findings**")
                    for vuln in resource['vulnerabilities']:
                        severity_class = f"severity-{vuln['severity'].lower()}"
                        st.markdown(f"""
                        <div style="border-left: 4px solid; padding: 10px; margin: 5px 0; background: #f8f9fa; border-radius: 5px; border-left-color: {{
                            'CRITICAL': '#ff4757',
                            'HIGH': '#ff6b6b',
                            'MEDIUM': '#ffa502',
                            'LOW': '#2ed573'
                        }}.get('{vuln['severity']}', '#666');">
                            <strong>{vuln['title']}</strong> - <span class="{severity_class}">{vuln['severity']}</span><br>
                            <small>{vuln['description']}</small>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.success("‚úÖ No vulnerabilities detected")
    
    def _display_ai_analysis_tab(self, vulnerabilities):
        """Display AI-powered analysis"""
        st.header("ü§ñ AI Security Analysis")
        
        if not vulnerabilities:
            st.info("Run a security scan to get AI-powered analysis.")
            return
        
        selected_vulns = st.session_state.selected_vulnerabilities
        
        if not selected_vulns:
            st.info("Select vulnerabilities from the Vulnerabilities tab for AI analysis.")
            
            # Quick analysis option
            st.subheader("üöÄ Quick Analysis")
            quick_vuln = st.selectbox(
                "Select a vulnerability for instant AI analysis:",
                options=vulnerabilities,
                format_func=lambda x: f"{x['severity']} - {x['title']} - {x['resource_name']}"
            )
            
            if quick_vuln and st.button("ü§ñ Analyze This Vulnerability"):
                self._display_ai_analysis_results(quick_vuln)
            return
        
        # Display analysis for selected vulnerabilities
        st.subheader("üìã Selected for AI Analysis")
        
        for idx, vuln in enumerate(selected_vulns):
            st.markdown(f"**{vuln['title']}** - `{vuln['resource_name']}`")
            
            if st.button(f"üß† Run AI Analysis", key=f"run_ai_{idx}"):
                self._display_ai_analysis_results(vuln)
            
            if st.button(f"‚ùå Remove", key=f"remove_ai_{idx}"):
                st.session_state.selected_vulnerabilities.remove(vuln)
                st.rerun()
            
            st.markdown("---")
    
    def _display_ai_analysis_results(self, vulnerability):
        """Display detailed AI analysis results"""
        st.markdown(f"### ü§ñ AI Analysis: {vulnerability['title']}")
        
        # Risk Assessment
        st.markdown("""
        <div class="risk-assessment">
            <h4>üìà Risk Assessment</h4>
            <p><strong>Overall Risk Score:</strong> {}/100</p>
            <p><strong>Business Impact:</strong> {}</p>
            <p><strong>Attack Vectors:</strong> {}</p>
            <p><strong>Exploitation Likelihood:</strong> High (Based on current configuration)</p>
        </div>
        """.format(
            vulnerability.get('risk_score', 75),
            vulnerability.get('business_impact', 'Medium'),
            ', '.join(vulnerability.get('attack_vectors', ['Multiple']))
        ), unsafe_allow_html=True)
        
        # Remediation Steps
        st.markdown("#### üõ†Ô∏è Detailed Remediation Plan")
        
        remediation_steps = [
            "1. **Immediate Action:** " + vulnerability['remediation'],
            "2. **Security Hardening:** Implement additional security controls based on AWS best practices",
            "3. **Monitoring:** Set up CloudWatch alarms and GuardDuty for continuous monitoring",
            "4. **Validation:** Verify remediation effectiveness through security testing",
            "5. **Documentation:** Update security documentation and runbooks"
        ]
        
        for step in remediation_steps:
            st.markdown(f"""
            <div class="remediation-step">
                <p>{step}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # AWS Commands
        st.markdown("#### üíª AWS CLI Commands")
        
        commands = {
            'EC2-PUBLIC-IP': [
                "# Remove public IP association",
                "aws ec2 modify-instance-attribute --instance-id i-12345 --no-associate-public-ip-address",
                "",
                "# Create new security group with restricted rules",
                "aws ec2 create-security-group --group-name restricted-sg --description \"Restricted security group\""
            ],
            'EC2-SG-OPEN-SSH': [
                "# Revoke open SSH access",
                "aws ec2 revoke-security-group-ingress --group-id sg-12345 --protocol tcp --port 22 --cidr 0.0.0.0/0",
                "",
                "# Authorize specific IP ranges",
                "aws ec2 authorize-security-group-ingress --group-id sg-12345 --protocol tcp --port 22 --cidr 192.168.1.0/24"
            ],
            'LAMBDA-ENV-SECRETS': [
                "# Create secret in Secrets Manager",
                "aws secretsmanager create-secret --name lambda-db-credentials --secret-string '{\"username\":\"admin\",\"password\":\"secret\"}'",
                "",
                "# Update Lambda function to use Secrets Manager",
                "aws lambda update-function-configuration --function-name my-function --environment Variables={DB_SECRET_ARN=arn:aws:secretsmanager:region:account:secret:lambda-db-credentials}"
            ]
        }
        
        cmd_list = commands.get(vulnerability['id'], [
            "# Specific commands would be generated based on the vulnerability",
            "# aws [service] [command] --parameters",
            "# ..."
        ])
        
        for cmd in cmd_list:
            if cmd.startswith("#"):
                st.write(cmd)
            else:
                st.code(cmd, language='bash')
        
        # AI Insights
        st.markdown("#### üîÆ AI Security Insights")
        
        insights = [
            "**Pattern Recognition:** This vulnerability pattern is commonly found in {} of AWS environments.".format(random.randint(15, 40)),
            "**Trend Analysis:** Similar configurations have led to security incidents in the past 6 months.",
            "**Best Practice:** AWS recommends {} for this service.".format(
                "private subnets with NAT gateways" if vulnerability['service'] == 'EC2' 
                else "secret management via Secrets Manager" if vulnerability['service'] == 'Lambda'
                else "enabled control plane logging"
            ),
            "**Cost Impact:** Remediation may reduce potential financial impact from security incidents by ~${}k/year".format(random.randint(10, 50))
        ]
        
        for insight in insights:
            st.markdown(f"""
            <div class="ai-insight">
                <p>{insight}</p>
            </div>
            """, unsafe_allow_html=True)
    
    def _display_remediation_tab(self, vulnerabilities):
        """Enhanced remediation hub"""
        st.header("‚ö° Remediation Hub")
        
        selected_vulns = st.session_state.selected_vulnerabilities
        
        if not selected_vulns:
            st.info("üéØ Select vulnerabilities from the Vulnerabilities tab to begin remediation planning.")
            return
        
        # Remediation overview
        st.subheader("üìã Remediation Overview")
        
        total_risk = sum([v.get('risk_score', 50) for v in selected_vulns])
        critical_count = len([v for v in selected_vulns if v['severity'] in ['CRITICAL', 'HIGH']])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Selected Items", len(selected_vulns))
        with col2:
            st.metric("Total Risk Score", total_risk)
        with col3:
            st.metric("Critical/High", critical_count)
        
        # Selected vulnerabilities
        st.subheader("üéØ Selected for Remediation")
        
        for idx, vuln in enumerate(selected_vulns):
            col1, col2, col3 = st.columns([4, 1, 1])
            with col1:
                severity_class = f"severity-{vuln['severity'].lower()}"
                st.markdown(f"""
                **{vuln['title']}** 
                - `{vuln['resource_name']}` 
                - <span class='{severity_class}'>{vuln['severity']}</span>
                - Risk: {vuln.get('risk_score', 50)}/100
                """, unsafe_allow_html=True)
            with col2:
                if st.button("üìã Plan", key=f"plan_{idx}"):
                    st.session_state.remediation_plan = self._generate_remediation_plan([vuln])
                    st.success("Remediation plan generated!")
            with col3:
                if st.button("üóëÔ∏è Remove", key=f"remove_{idx}"):
                    st.session_state.selected_vulnerabilities.remove(vuln)
                    st.rerun()
        
        # Remediation actions
        st.subheader("üöÄ Remediation Actions")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìã Generate Plan", use_container_width=True):
                st.session_state.remediation_plan = self._generate_remediation_plan(selected_vulns)
                st.success("‚úÖ Comprehensive remediation plan generated!")
        
        with col2:
            if st.button("üîç Preview Changes", use_container_width=True):
                self._preview_remediation_changes(selected_vulns)
        
        with col3:
            if st.button("‚ö° Execute Plan", use_container_width=True, type="primary"):
                self._execute_remediation(selected_vulns)
        
        # Show remediation plan
        if st.session_state.remediation_plan:
            st.subheader("üìÑ Generated Remediation Plan")
            st.json(st.session_state.remediation_plan, expanded=False)
    
    def _generate_remediation_plan(self, vulnerabilities):
        """Generate detailed remediation plan"""
        return {
            'timestamp': datetime.now().isoformat(),
            'vulnerabilities': [v['id'] for v in vulnerabilities],
            'estimated_duration': '45 minutes',
            'risk_level': 'Medium',
            'steps': [
                {
                    'action': f"Remediate {v['title']}",
                    'resource': v['resource_name'],
                    'estimated_time': '15 minutes',
                    'risk': v['severity'],
                    'commands': [
                        f"aws {v['service'].lower()} update-configuration --resource {v['resource_id']}",
                        "# Additional configuration commands..."
                    ]
                }
                for v in vulnerabilities
            ]
        }
    
    def _preview_remediation_changes(self, vulnerabilities):
        """Preview remediation changes"""
        st.subheader("üîç Change Preview")
        
        for vuln in vulnerabilities:
            with st.expander(f"Changes for {vuln['title']}"):
                st.markdown(f"""
                **Resource:** {vuln['resource_name']} ({vuln['resource_id']})
                **Current State:** Vulnerable - {vuln['description']}
                **Target State:** Secured - {vuln['remediation']}
                **Impact:** Low - No service disruption expected
                **Rollback:** Automated rollback available
                """)
    
    def _execute_remediation(self, vulnerabilities):
        """Execute remediation with enhanced visuals"""
        progress_bar = st.progress(0)
        status_text = st.empty()
        results_container = st.container()
        
        steps = [
            "üîÑ Initializing remediation engine...",
            "üìã Validating remediation plan...",
            "üîí Creating backup snapshots...",
            "‚ö° Applying security configurations...",
            "‚úÖ Verifying changes...",
            "üìä Generating compliance report..."
        ]
        
        for i, step in enumerate(steps):
            status_text.text(f"**{step}**")
            progress_bar.progress((i + 1) / len(steps))
            time.sleep(1)
            
            with results_container:
                if i == 3:  # During configuration application
                    for vuln in vulnerabilities:
                        st.success(f"‚úÖ Configured: {vuln['title']}")
        
        status_text.text("üéâ Remediation completed successfully!")
        st.balloons()
        
        # Show results
        with results_container:
            st.success("**Remediation Summary**")
            for vuln in vulnerabilities:
                st.write(f"‚Ä¢ {vuln['title']} - ‚úÖ Resolved")

def main():
    app = AWSVulnerabilityApp()
    app.display_dashboard()

if __name__ == "__main__":
    main()