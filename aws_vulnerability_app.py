import streamlit as st
import boto3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
import os
from dotenv import load_dotenv
import time
import random
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import logging

# Load environment variables
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set page config
st.set_page_config(
    page_title="AWS Vulnerability Remediation AI",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS - updated with darker colors for yellow/blue backgrounds
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        color: #FF4B4B;
        text-align: center;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 800;
    }
    .sub-header {
        font-size: 1.4rem;
        color: #e0e0e0;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 300;
    }
    .severity-critical { 
        background: linear-gradient(135deg, #dc3545, #c82333); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(220, 53, 69, 0.3);
    }
    .severity-high { 
        background: linear-gradient(135deg, #fd7e14, #e86209); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(253, 126, 20, 0.3);
    }
    .severity-medium { 
        background: linear-gradient(135deg, #d4a017, #b28704); 
        color: #ffffff; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(212, 160, 23, 0.3);
    }
    .severity-low { 
        background: linear-gradient(135deg, #28a745, #218838); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
    }
    .metric-card {
        background: linear-gradient(135deg, #1a252f, #2c3e50);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        border: 1px solid #444;
        transition: transform 0.3s ease, border-color 0.3s ease;
    }
    .metric-card:hover {
        transform: translateY(-5px);
        border-color: #667eea;
    }
    .metric-value {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 10px 0;
    }
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    .service-card {
        background: linear-gradient(135deg, #1a252f, #2c3e50);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        border: 1px solid #444;
        transition: all 0.3s ease;
    }
    .service-card:hover {
        transform: translateY(-3px);
        border-color: #667eea;
        box-shadow: 0 8px 25px rgba(0,0,0,0.25);
    }
    .vulnerability-card {
        background: #2c2c2c;
        color: #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        border-left: 5px solid;
        border: 1px solid #444;
        transition: all 0.3s ease;
    }
    .vulnerability-card:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.25);
        border-color: #667eea;
    }
    .remediation-step {
        background: linear-gradient(135deg, #3c4b64, #2c3e50);
        color: #e0e0e0;
        padding: 20px;
        margin: 15px 0;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    .risk-assessment {
        background: linear-gradient(135deg, #4a4a4a, #3c3c3c);
        color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #d4a017;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    .ai-insight {
        background: linear-gradient(135deg, #2c3e50, #34495e);
        color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #17a2b8;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    .security-tip {
        background: linear-gradient(135deg, #3c4b64, #2c3e50);
        color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #28a745;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    .credentials-status {
        background: linear-gradient(135deg, #2c3e50, #34495e);
        color: #e0e0e0;
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #17a2b8;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    .progress-bar {
        height: 8px;
        border-radius: 4px;
        background: #4a4a4a;
        margin: 10px 0;
        overflow: hidden;
    }
    .progress-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.5s ease;
    }
    .chart-container {
        background: #2c2c2c;
        color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        border: 1px solid #444;
    }
    .severity-bar {
        height: 30px;
        margin: 10px 0;
        border-radius: 15px;
        display: flex;
        align-items: center;
        padding: 0 15px;
        color: white;
        font-weight: bold;
        position: relative;
    }
    .severity-bar::after {
        content: attr(data-count);
        position: absolute;
        right: 15px;
    }
    .service-distribution {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 15px 0;
    }
    .service-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background: #3c4b64;
        color: #e0e0e0;
        border-radius: 8px;
        border-left: 4px solid #667eea;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    /* Dark Mode Styles */
    .dark-mode [data-testid="stAppViewContainer"] {
        background-color: #121212;
        color: #e0e0e0;
    }
    .dark-mode .stMarkdown, .dark-mode .stText {
        color: #e0e0e0;
    }
    .dark-mode .metric-card, .dark-mode .service-card {
        background: linear-gradient(135deg, #1a252f, #2c3e50);
        border: 1px solid #444;
    }
    .dark-mode .vulnerability-card {
        background: #2c2c2c;
        color: #e0e0e0;
        border: 1px solid #444;
    }
    /* Responsive Design */
    @media (max-width: 768px) {
        .metric-card, .service-card { 
            margin: 5px 0; 
            width: 100%; 
        }
        [data-testid="column"]:not(:first-child) { 
            margin-left: 0; 
            width: 100%; 
        }
        .severity-bar { 
            flex-direction: column; 
            text-align: center; 
        }
        .main-header {
            font-size: 2rem;
        }
    }
</style>
""", unsafe_allow_html=True)

class AWSVulnerabilityApp:
    def __init__(self):
        """Initialize the application with session state and AWS clients"""
        self._initialize_session_state()
        self.aws_clients = self._setup_aws_clients()
    
    def _initialize_session_state(self):
        """Initialize all session state variables"""
        defaults = {
            'scan_results': None,
            'selected_vulnerabilities': [],
            'remediation_results': {},
            'ai_analysis_cache': {},
            'remediation_plan': None,
            'remediation_logs': [],
            'selected_services': ['EC2', 'EKS', 'Lambda', 'S3', 'IAM', 'VPC', 'RDS'],
            'selected_tools': ['GuardDuty', 'Wiz', 'Prisma', 'Cortex', 'Qualys'],
            'scan_details': {},
            'execution_mode': 'dry-run',
            'dark_mode': True,  # Default to dark mode for better contrast
            'security_score': 85,
            'last_scan_time': None,
            'trend_data': self._generate_trend_data()
        }
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value
    
    def _generate_trend_data(self):
        """Generate sample trend data for visualization"""
        dates = [(datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d') 
                for i in range(30, 0, -1)]
        return {
            'dates': dates,
            'vulnerabilities': [random.randint(5, 25) for _ in range(30)],
            'resources': [random.randint(50, 120) for _ in range(30)],
            'security_score': [random.randint(70, 95) for _ in range(30)]
        }
    
    def _setup_aws_clients(self):
        """Setup AWS clients with secrets/env fallback"""
        try:
            access_key = st.secrets.get('AWS_ACCESS_KEY_ID', os.getenv('AWS_ACCESS_KEY_ID'))
            secret_key = st.secrets.get('AWS_SECRET_ACCESS_KEY', os.getenv('AWS_SECRET_ACCESS_KEY'))
            region = st.secrets.get('AWS_REGION', os.getenv('AWS_REGION', 'us-east-1'))
            
            if access_key and secret_key:
                session = boto3.Session(
                    aws_access_key_id=access_key,
                    aws_secret_access_key=secret_key,
                    region_name=region
                )
                logger.info("AWS clients initialized successfully")
                return {
                    'ec2': session.client('ec2'),
                    'eks': session.client('eks'),
                    'lambda': session.client('lambda'),
                    's3': session.client('s3'),
                    'iam': session.client('iam'),
                    'rds': session.client('rds'),
                    'vpc': session.client('ec2')
                }
            else:
                logger.warning("No AWS credentials found - demo mode")
                return None
        except Exception as e:
            logger.error(f"AWS Setup Failed: {e}")
            st.error(f"AWS Setup Failed: {e}. Falling back to demo mode.")
            return None
    
    def _generate_enhanced_sample_data(self):
        """Generate enhanced sample data with third-party tool sources"""
        resources = [
            {
                'resource_id': 'i-1234567890abcdef0',
                'resource_type': 'EC2',
                'service': 'EC2',
                'name': 'web-server-production',
                'state': 'running',
                'instance_type': 't3.large',
                'public_ip': '54.210.100.50',
                'launch_time': '2024-01-15 08:30:00',
                'vulnerabilities': [
                    {
                        'id': 'EC2-PUBLIC-IP',
                        'title': 'Publicly Accessible EC2 Instance',
                        'severity': 'HIGH',
                        'description': 'EC2 instance is directly accessible from the internet with a public IP address, increasing attack surface.',
                        'remediation': 'Move instance to private subnet and use Application Load Balancer for public access.',
                        'category': 'Network Security',
                        'risk_score': 85,
                        'compliance_standards': ['CIS AWS 1.4', 'PCI DSS 1.2'],
                        'attack_vectors': ['SSH Brute Force', 'Port Scanning'],
                        'business_impact': 'High - Potential data breach and service disruption',
                        'detection_time': '2 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Medium',
                        'source_tool': 'GuardDuty'
                    },
                    {
                        'id': 'EC2-SG-OPEN-SSH',
                        'title': 'SSH Port Open to Internet',
                        'severity': 'CRITICAL',
                        'description': 'Security group allows SSH access from any IP address (0.0.0.0/0), enabling potential unauthorized access.',
                        'remediation': 'Restrict SSH access to specific IP ranges and implement VPN or bastion host.',
                        'category': 'Network Security',
                        'risk_score': 95,
                        'compliance_standards': ['CIS AWS 4.1', 'NIST 800-53'],
                        'attack_vectors': ['SSH Brute Force', 'Credential Stuffing'],
                        'business_impact': 'Critical - Complete system compromise possible',
                        'detection_time': '1 hour ago',
                        'exploitability': 'Very Easy',
                        'remediation_complexity': 'Low',
                        'source_tool': 'Wiz'
                    }
                ]
            },
            {
                'resource_id': 'prod-eks-cluster-01',
                'resource_type': 'EKS',
                'service': 'EKS',
                'name': 'production-kubernetes',
                'status': 'ACTIVE',
                'version': '1.28',
                'endpoint': 'https://xyz.gr7.us-east-1.eks.amazonaws.com',
                'vulnerabilities': [
                    {
                        'id': 'EKS-LOGGING-DISABLED',
                        'title': 'Control Plane Logging Disabled',
                        'severity': 'MEDIUM',
                        'description': 'EKS control plane logging is not enabled, limiting audit capability and security monitoring.',
                        'remediation': 'Enable all control plane log types (api, audit, authenticator, scheduler) for comprehensive monitoring.',
                        'category': 'Logging & Monitoring',
                        'risk_score': 45,
                        'compliance_standards': ['CIS Kubernetes 1.2.1'],
                        'attack_vectors': ['Lack of Audit Trail'],
                        'business_impact': 'Medium - Limited visibility into cluster activities',
                        'detection_time': '5 hours ago',
                        'exploitability': 'Difficult',
                        'remediation_complexity': 'Low',
                        'source_tool': 'Prisma'
                    }
                ]
            },
            {
                'resource_id': 'data-processor-function',
                'resource_type': 'Lambda',
                'service': 'Lambda',
                'name': 'customer-data-processor',
                'runtime': 'python3.9',
                'memory_size': 512,
                'timeout': 300,
                'vulnerabilities': [
                    {
                        'id': 'LAMBDA-ENV-SECRETS',
                        'title': 'Secrets in Environment Variables',
                        'severity': 'HIGH',
                        'description': 'Lambda function stores database credentials in plaintext environment variables.',
                        'remediation': 'Migrate secrets to AWS Secrets Manager and implement secret rotation.',
                        'category': 'Data Protection',
                        'risk_score': 75,
                        'compliance_standards': ['GDPR Article 32', 'HIPAA'],
                        'attack_vectors': ['Credential Theft', 'Environment Inspection'],
                        'business_impact': 'High - Potential PII data exposure',
                        'detection_time': '3 hours ago',
                        'exploitability': 'Medium',
                        'remediation_complexity': 'Medium',
                        'source_tool': 'Cortex'
                    }
                ]
            },
            {
                'resource_id': 'customer-data-bucket',
                'resource_type': 'S3',
                'service': 'S3',
                'name': 'customer-uploads-prod',
                'creation_date': '2024-01-10',
                'vulnerabilities': [
                    {
                        'id': 'S3-PUBLIC-READ',
                        'title': 'S3 Bucket Public Read Access',
                        'severity': 'HIGH',
                        'description': 'S3 bucket allows public read access, potentially exposing sensitive customer data.',
                        'remediation': 'Enable S3 Block Public Access and review bucket policies.',
                        'category': 'Data Protection',
                        'risk_score': 80,
                        'compliance_standards': ['GDPR Article 25', 'PCI DSS 3.2'],
                        'attack_vectors': ['Data Exfiltration', 'Unauthorized Access'],
                        'business_impact': 'High - Customer data exposure risk',
                        'detection_time': '4 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Low',
                        'source_tool': 'Qualys'
                    }
                ]
            },
            {
                'resource_id': 'rds-prod-db-01',
                'resource_type': 'RDS',
                'service': 'RDS',
                'name': 'production-database',
                'engine': 'postgres',
                'version': '13.7',
                'status': 'available',
                'publicly_accessible': True,
                'creation_date': '2024-02-01',
                'vulnerabilities': [
                    {
                        'id': 'RDS-PUBLIC-ACCESS',
                        'title': 'Publicly Accessible RDS Instance',
                        'severity': 'CRITICAL',
                        'description': 'RDS instance is publicly accessible, exposing it to unauthorized access.',
                        'remediation': 'Disable public access and configure VPC security groups.',
                        'category': 'Network Security',
                        'risk_score': 90,
                        'compliance_standards': ['CIS AWS 2.3', 'PCI DSS 1.3'],
                        'attack_vectors': ['SQL Injection', 'Unauthorized Access'],
                        'business_impact': 'Critical - Potential data breach',
                        'detection_time': '2 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Medium',
                        'source_tool': 'Wiz'
                    }
                ]
            }
        ]
        
        vulnerabilities = []
        for resource in resources:
            for vuln in resource.get('vulnerabilities', []):
                vuln_data = vuln.copy()
                vuln_data['resource_id'] = resource['resource_id']
                vuln_data['resource_type'] = resource['resource_type']
                vuln_data['resource_name'] = resource.get('name', resource['resource_id'])
                vuln_data['service'] = resource.get('service', 'Unknown')
                vulnerabilities.append(vuln_data)
        
        return resources, vulnerabilities
    
    def _fetch_real_ec2_instances(self):
        """Fetch real EC2 instances if AWS clients are available"""
        if not self.aws_clients:
            return []
        try:
            ec2_response = self.aws_clients['ec2'].describe_instances()
            resources = []
            for reservation in ec2_response['Reservations']:
                for instance in reservation['Instances']:
                    resource = {
                        'resource_id': instance['InstanceId'],
                        'resource_type': 'EC2',
                        'service': 'EC2',
                        'name': next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'Name'), instance['InstanceId']),
                        'state': instance['State']['Name'],
                        'instance_type': instance['InstanceType'],
                        'public_ip': instance.get('PublicIpAddress', 'None'),
                        'launch_time': instance['LaunchTime'].isoformat(),
                        'vulnerabilities': []
                    }
                    if resource['public_ip'] != 'None':
                        resource['vulnerabilities'].append({
                            'id': 'EC2-PUBLIC-IP-REAL',
                            'title': 'Publicly Accessible EC2 Instance (Real)',
                            'severity': 'HIGH',
                            'description': 'Detected public IP in live scan.',
                            'remediation': 'Associate Elastic IP or move to private subnet.',
                            'category': 'Network Security',
                            'risk_score': 85,
                            'compliance_standards': ['CIS AWS 1.4'],
                            'attack_vectors': ['Port Scanning'],
                            'business_impact': 'High',
                            'detection_time': 'Now',
                            'exploitability': 'Easy',
                            'remediation_complexity': 'Medium',
                            'source_tool': 'GuardDuty'
                        })
                    resources.append(resource)
            logger.info(f"Scanned {len(resources)} real EC2 instances")
            return resources
        except Exception as e:
            logger.error(f"EC2 scan error: {e}")
            st.warning(f"Failed to scan EC2: {e}. Falling back to sample data.")
            return []
    
    def _fetch_real_rds_instances(self):
        """Fetch real RDS instances if AWS clients are available"""
        if not self.aws_clients:
            return []
        try:
            rds_response = self.aws_clients['rds'].describe_db_instances()
            resources = []
            for instance in rds_response['DBInstances']:
                resource = {
                    'resource_id': instance['DBInstanceIdentifier'],
                    'resource_type': 'RDS',
                    'service': 'RDS',
                    'name': instance.get('DBName', instance['DBInstanceIdentifier']),
                    'engine': instance['Engine'],
                    'version': instance['EngineVersion'],
                    'status': instance['DBInstanceStatus'],
                    'publicly_accessible': instance['PubliclyAccessible'],
                    'creation_date': instance['InstanceCreateTime'].isoformat(),
                    'vulnerabilities': []
                }
                if resource['publicly_accessible']:
                    resource['vulnerabilities'].append({
                        'id': 'RDS-PUBLIC-ACCESS-REAL',
                        'title': 'Publicly Accessible RDS Instance (Real)',
                        'severity': 'CRITICAL',
                        'description': 'Detected public access in live scan.',
                        'remediation': 'Disable public access and configure VPC security groups.',
                        'category': 'Network Security',
                        'risk_score': 90,
                        'compliance_standards': ['CIS AWS 2.3'],
                        'attack_vectors': ['SQL Injection'],
                        'business_impact': 'Critical',
                        'detection_time': 'Now',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Medium',
                        'source_tool': 'GuardDuty'
                    })
                resources.append(resource)
            logger.info(f"Scanned {len(resources)} real RDS instances")
            return resources
        except Exception as e:
            logger.error(f"RDS scan error: {e}")
            st.warning(f"Failed to scan RDS: {e}. Falling back to sample data.")
            return []
    
    def run_comprehensive_scan(self, selected_services):
        """Run comprehensive security scan with real AWS integration"""
        with st.spinner('üöÄ **Launching Comprehensive Security Assessment...**'):
            try:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                steps = [
                    "üîç Initializing security scanner...",
                    "üñ•Ô∏è Scanning EC2 instances...",
                    "‚ò∏Ô∏è Analyzing EKS clusters...",
                    "Œª Inspecting Lambda functions...",
                    "ü™£ Checking S3 buckets...",
                    "üë§ Reviewing IAM policies...",
                    "üóÑÔ∏è Scanning RDS instances...",
                    "üåê Analyzing VPC configurations...",
                    "üìä Analyzing security findings...",
                    "ü§ñ Generating AI insights..."
                ]
                
                scan_details = {}
                resources = []
                vulnerabilities = []
                
                for i, step in enumerate(steps):
                    status_text.text(f"**{step}**")
                    progress_bar.progress((i + 1) / len(steps))
                    time.sleep(0.5)
                    
                    if 'EC2' in selected_services and 'Scanning EC2' in step:
                        resources.extend(self._fetch_real_ec2_instances())
                    if 'RDS' in selected_services and 'Scanning RDS' in step:
                        resources.extend(self._fetch_real_rds_instances())
                
                # Fallback to sample data
                sample_resources, sample_vulns = self._generate_enhanced_sample_data()
                if not resources:
                    resources = sample_resources
                else:
                    resources.extend(sample_resources)
                vulnerabilities.extend(sample_vulns)
                
                st.session_state.scan_results = {
                    'resources': resources,
                    'vulnerabilities': vulnerabilities,
                    'scan_time': datetime.now().isoformat(),
                    'is_demo': self.aws_clients is None,
                    'scan_details': scan_details,
                    'total_resources': len(resources)
                }
                
                st.session_state.last_scan_time = datetime.now()
                st.session_state.security_score = max(0, 100 - len(vulnerabilities) * 2)
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ **Security Assessment Complete!**")
                self._show_scan_summary(resources, vulnerabilities)
                st.rerun()
                
            except Exception as e:
                logger.error(f"Scan failed: {e}")
                st.error(f"‚ùå Scan failed: {e}. Retrying with basic scan...")
                if st.button("üîÑ Retry Scan"):
                    st.rerun()
                self.run_basic_scan()
    
    def run_basic_scan(self):
        """Basic scan with sample data"""
        try:
            resources, vulnerabilities = self._generate_enhanced_sample_data()
            st.session_state.scan_results = {
                'resources': resources,
                'vulnerabilities': vulnerabilities,
                'scan_time': datetime.now().isoformat(),
                'is_demo': True
            }
            st.session_state.security_score = 78
            st.success("‚úÖ Basic scan complete!")
            st.rerun()
        except Exception as e:
            logger.error(f"Basic scan failed: {e}")
            st.error(f"Basic scan failed: {e}")
    
    def _show_scan_summary(self, resources, vulnerabilities):
        """Display scan summary with metrics"""
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            self._create_metric_card("üìà", "Resources", len(resources), "#667eea")
        with col2:
            self._create_metric_card("üö®", "Vulnerabilities", len(vulnerabilities), "#ff6b6b")
        with col3:
            critical = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            self._create_metric_card("üî•", "Critical", critical, "#ff4757")
        with col4:
            self._create_metric_card("üõ°Ô∏è", "Security Score", f"{st.session_state.security_score}/100", "#2ed573")
    
    def display_dashboard(self):
        """Main dashboard with enhanced visuals"""
        with st.sidebar:
            st.header("‚öôÔ∏è Settings")
            st.session_state.dark_mode = st.checkbox("üåô Dark Mode", value=st.session_state.dark_mode)
            st.session_state.execution_mode = st.selectbox("Execution Mode", ['dry-run', 'live'], index=0)
            st.session_state.selected_services = st.multiselect(
                "Select Services to Scan",
                ['EC2', 'EKS', 'Lambda', 'S3', 'IAM', 'VPC', 'RDS'],
                default=st.session_state.selected_services
            )
            st.session_state.selected_tools = st.multiselect(
                "Select Security Tools",
                ['GuardDuty', 'Wiz', 'Prisma', 'Cortex', 'Qualys'],
                default=st.session_state.selected_tools
            )
            if st.button("üîÑ Clear Cache"):
                st.rerun()
        
        if st.session_state.dark_mode:
            st.markdown('<style>.dark-mode { display: block; }</style>', unsafe_allow_html=True)
        
        st.markdown('<h1 class="main-header">üõ°Ô∏è AWS Vulnerability Remediation AI</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Enterprise Cloud Security with Multi-Tool Threat Intelligence</p>', unsafe_allow_html=True)
        
        self._display_security_overview()
        
        if st.session_state.scan_results is None:
            self.display_welcome()
        else:
            self.display_enhanced_results()
    
    def _display_security_overview(self):
        """Display security overview metrics"""
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            if st.session_state.last_scan_time:
                last_scan = st.session_state.last_scan_time.strftime('%Y-%m-%d %H:%M')
                mode = 'üî¨ Demo' if st.session_state.scan_results.get('is_demo', True) else 'üöÄ Live'
                st.info(f"**Last Assessment:** {last_scan} | **Mode:** {mode}")
            else:
                st.info("**Ready for security assessment** | **Mode:** üî¨ Demo")
        with col2:
            if st.button("üîÑ Quick Scan", use_container_width=True):
                self.run_basic_scan()
        with col3:
            if st.button("üöÄ Full Assessment", use_container_width=True, type="primary"):
                self.run_comprehensive_scan(st.session_state.selected_services)
    
    def display_welcome(self):
        """Welcome screen with service cards"""
        col1, col2 = st.columns([1, 1])
        with col1:
            st.markdown("""
            <div style='text-align: center; padding: 20px;'>
                <h2 style='color: #e0e0e0; margin-bottom: 10px;'>üîç Comprehensive Cloud Security</h2>
                <p style='color: #b0b0b0; font-size: 1.1rem;'>AI-powered vulnerability detection and automated remediation for your AWS environment</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.subheader("üéØ Protected Services")
            services = [
                ("üñ•Ô∏è", "EC2", "Compute Security", "Instances, AMIs, Security Groups"),
                ("‚ò∏Ô∏è", "EKS", "Kubernetes Security", "Clusters, Pods, RBAC"),
                ("Œª", "Lambda", "Serverless Security", "Functions, Permissions, Runtime"),
                ("ü™£", "S3", "Storage Security", "Buckets, Encryption, Access"),
                ("üë§", "IAM", "Access Security", "Users, Roles, Policies"),
                ("üåê", "VPC", "Network Security", "Subnets, NACLs, Flow Logs"),
                ("üóÑÔ∏è", "RDS", "Database Security", "Instances, Backups, Encryption")
            ]
            cols = st.columns(3)
            for i, (icon, name, title, desc) in enumerate(services):
                with cols[i % 3]:
                    st.markdown(f"""
                    <div class="service-card">
                        <h3 style='margin: 0; font-size: 2rem;'>{icon}</h3>
                        <h4 style='margin: 5px 0; color: #e0e0e0;'>{name}</h4>
                        <p style='margin: 5px 0; font-weight: 600; color: #e0e0e0;'>{title}</p>
                        <small style='opacity: 0.9; color: #b0b0b0;'>{desc}</small>
                    </div>
                    """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style='background: linear-gradient(135deg, #1a252f, #2c3e50); 
                        color: #e0e0e0; padding: 30px; border-radius: 15px; margin-bottom: 20px;'>
                <h3 style='color: #e0e0e0; margin-bottom: 15px;'>ü§ñ AI-Powered Security</h3>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üîç</span>
                    <span>Intelligent Vulnerability Detection</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>‚ö°</span>
                    <span>Automated Remediation Plans</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üìä</span>
                    <span>Risk-Based Prioritization</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üõ°Ô∏è</span>
                    <span>Compliance Monitoring</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div class="security-tip">
                <h4 style='color: #e0e0e0;'>üöÄ Get Started</h4>
                <p style='color: #b0b0b0;'>Run a security assessment to discover vulnerabilities and get AI-powered remediation guidance.</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("üéØ Start Security Assessment", use_container_width=True, type="primary"):
                self.run_comprehensive_scan(st.session_state.selected_services)
    
    def display_enhanced_results(self):
        """Display results with tabs including execution dashboard"""
        if not st.session_state.scan_results.get('resources') or not st.session_state.scan_results.get('vulnerabilities'):
            st.error("Invalid scan results. Please run a new scan.")
            return
        
        resources = st.session_state.scan_results['resources']
        vulnerabilities = st.session_state.scan_results['vulnerabilities']
        
        tabs = st.tabs([
            "üìä Dashboard",
            "üö® Vulnerabilities",
            "üîß Resources",
            "ü§ñ AI Analysis",
            "‚ö° Remediation",
            "üìà Execution Dashboard"
        ])
        
        with tabs[0]:
            self._display_dashboard_tab(resources, vulnerabilities)
        with tabs[1]:
            self._display_vulnerabilities_tab(vulnerabilities)
        with tabs[2]:
            self._display_resources_tab(resources)
        with tabs[3]:
            self._display_ai_analysis_tab(vulnerabilities)
        with tabs[4]:
            self._display_remediation_tab(vulnerabilities)
        with tabs[5]:
            self._display_execution_dashboard()
    
    def _display_execution_dashboard(self):
        """Display execution status dashboard"""
        st.header("üìà Execution Dashboard")
        
        if not st.session_state.remediation_logs:
            st.info("No remediation actions executed yet. Run a plan in the Remediation tab to see logs here.")
            return
        
        st.subheader("Execution Logs")
        logs_df = pd.DataFrame(st.session_state.remediation_logs)
        st.dataframe(logs_df, use_container_width=True)
        
        st.subheader("Status Summary")
        status_counts = logs_df['status'].value_counts()
        fig = px.pie(status_counts, values=status_counts.values, names=status_counts.index,
                     title="Remediation Status Distribution",
                     color_discrete_map={'Success': '#28a745', 'Failed': '#dc3545', 'In Progress': '#007bff'})
        st.plotly_chart(fig, use_container_width=True)
        
        if st.button("üóëÔ∏è Clear Logs"):
            st.session_state.remediation_logs = []
            st.rerun()
    
    def _display_remediation_tab(self, vulnerabilities):
        """Enhanced remediation hub with detailed plan and CSV export"""
        st.header("‚ö° Remediation Hub")
        
        selected_vulns = st.session_state.selected_vulnerabilities
        if not selected_vulns:
            st.info("üéØ Select vulnerabilities from the Vulnerabilities tab to begin remediation planning.")
            return
        
        st.subheader("üìã Remediation Overview")
        total_risk = sum(v.get('risk_score', 50) for v in selected_vulns)
        critical_count = len([v for v in selected_vulns if v['severity'] in ['CRITICAL', 'HIGH']])
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Selected Items", len(selected_vulns))
        with col2:
            st.metric("Total Risk Score", total_risk)
        with col3:
            st.metric("Critical/High", critical_count)
        
        st.subheader("üéØ Selected for Remediation")
        for idx, vuln in enumerate(selected_vulns):
            col1, col2, col3 = st.columns([4, 1, 1])
            with col1:
                severity_class = f"severity-{vuln['severity'].lower()}"
                st.markdown(f"""
                **{vuln['title']}** 
                - `{vuln['resource_name']}` 
                - <span class='{severity_class}'>{vuln['severity']}</span>
                - Risk: {vuln.get('risk_score', 50)}/100
                - Tool: {vuln['source_tool']}
                """, unsafe_allow_html=True)
            with col2:
                if st.button("üìã Plan", key=f"plan_{idx}"):
                    st.session_state.remediation_plan = self._generate_remediation_plan([vuln])
                    st.success("Remediation plan generated!")
            with col3:
                if st.button("üóëÔ∏è Remove", key=f"remove_{idx}"):
                    st.session_state.selected_vulnerabilities.remove(vuln)
                    st.rerun()
        
        st.subheader("üöÄ Remediation Actions")
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üìã Generate Plan", use_container_width=True):
                st.session_state.remediation_plan = self._generate_remediation_plan(selected_vulns)
                st.success("‚úÖ Comprehensive remediation plan generated!")
        with col2:
            if st.button("üîç Preview Changes", use_container_width=True):
                self._preview_remediation_changes(selected_vulns)
        with col3:
            if st.button("‚ö° Execute Plan", use_container_width=True, type="primary"):
                self._execute_remediation(selected_vulns)
        
        if st.session_state.remediation_plan:
            st.subheader("üìÑ Generated Remediation Plan")
            plan = st.session_state.remediation_plan
            st.markdown(f"""
            **Timestamp:** {plan['timestamp']}<br>
            **Vulnerabilities:** {', '.join(plan['vulnerabilities'])}<br>
            **Estimated Duration:** {plan['estimated_duration']}<br>
            **Risk Level:** {plan['risk_level']}
            """, unsafe_allow_html=True)
            st.subheader("Detailed Steps")
            for step in plan['steps']:
                with st.expander(f"{step['action']} - {step['resource']}"):
                    st.markdown(f"""
                    **Estimated Time:** {step['estimated_time']}<br>
                    **Risk:** {step['risk']}<br>
                    **Commands:**
                    """)
                    for cmd in step['commands']:
                        st.code(cmd, language='bash')
        
        st.subheader("üìä Export Remediation Report")
        st.info("Download a CSV file containing details of selected vulnerabilities for offline analysis or team sharing.")
        df = pd.DataFrame(selected_vulns)
        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• Download CSV",
            data=csv,
            file_name=f"remediation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            help="Exports details like title, severity, source tool, description, and remediation steps."
        )
        if st.button("üìÑ Preview CSV"):
            st.dataframe(df)
    
    def _generate_remediation_plan(self, vulnerabilities):
        """Generate detailed remediation plan with specific commands"""
        commands = {
            'EC2-PUBLIC-IP': [
                f"aws ec2 modify-instance-attribute --instance-id {v['resource_id']} --no-associate-public-ip-address",
                "aws ec2 create-security-group --group-name restricted-sg --description \"Restricted security group\"",
                "# Add instance to private subnet"
            ],
            'EC2-SG-OPEN-SSH': [
                f"aws ec2 revoke-security-group-ingress --group-id sg-placeholder --protocol tcp --port 22 --cidr 0.0.0.0/0",
                f"aws ec2 authorize-security-group-ingress --group-id sg-placeholder --protocol tcp --port 22 --cidr 192.168.1.0/24"
            ],
            'LAMBDA-ENV-SECRETS': [
                f"aws secretsmanager create-secret --name {v['resource_name']}-creds --secret-string '{\"username\":\"admin\",\"password\":\"secret\"}'",
                f"aws lambda update-function-configuration --function-name {v['resource_name']} --environment Variables={{DB_SECRET_ARN=arn:aws:secretsmanager:region:account:secret:{v['resource_name']}-creds}}"
            ],
            'S3-PUBLIC-READ': [
                f"aws s3api put-public-access-block --bucket {v['resource_name']} --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true",
                f"aws s3api get-bucket-policy --bucket {v['resource_name']}"
            ],
            'RDS-PUBLIC-ACCESS': [
                f"aws rds modify-db-instance --db-instance-identifier {v['resource_id']} --no-publicly-accessible",
                f"aws ec2 revoke-security-group-ingress --group-id sg-placeholder --protocol tcp --port 3306 --cidr 0.0.0.0/0"
            ]
        }
        
        return {
            'timestamp': datetime.now().isoformat(),
            'vulnerabilities': [v['id'] for v in vulnerabilities],
            'estimated_duration': f"{len(vulnerabilities) * 15} minutes",
            'risk_level': max((v['severity'] for v in vulnerabilities), default='Medium'),
            'steps': [
                {
                    'action': f"Remediate {v['title']}",
                    'resource': v['resource_name'],
                    'resource_id': v['resource_id'],
                    'service': v['service'],
                    'estimated_time': '15 minutes',
                    'risk': v['severity'],
                    'source_tool': v['source_tool'],
                    'commands': commands.get(v['id'], [
                        f"aws {v['service'].lower()} update-configuration --resource {v['resource_id']}",
                        "# Additional configuration commands..."
                    ])
                }
                for v in vulnerabilities
            ]
        }
    
    def _preview_remediation_changes(self, vulnerabilities):
        """Preview remediation changes with detailed impact analysis"""
        st.subheader("üîç Change Preview")
        for vuln in vulnerabilities:
            with st.expander(f"Changes for {vuln['title']}"):
                st.markdown(f"""
                **Resource:** {vuln['resource_name']} ({vuln['resource_id']})<br>
                **Service:** {vuln['service']}<br>
                **Source Tool:** {vuln['source_tool']}<br>
                **Current State:** Vulnerable - {vuln['description']}<br>
                **Target State:** Secured - {vuln['remediation']}<br>
                **Impact:** Low - Minimal service disruption expected<br>
                **Rollback Plan:** Automated snapshot creation before changes
                """, unsafe_allow_html=True)
    
    def _execute_remediation(self, vulnerabilities):
        """Execute remediation with real-time status and logging"""
        mode = st.session_state.execution_mode
        if mode == 'live' and not st.checkbox("Confirm Live Remediation (will modify AWS resources)"):
            st.warning("Live remediation cancelled.")
            return
        
        st.session_state.remediation_logs = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        log_container = st.container()
        
        steps = [
            "üîÑ Initializing remediation engine...",
            "üìã Validating remediation plan...",
            "üîí Creating backup snapshots...",
            "‚ö° Applying security configurations...",
            "‚úÖ Verifying changes...",
            "üìä Generating compliance report..."
        ]
        
        for i, step in enumerate(steps):
            status_text.text(f"**{step}** ({mode.capitalize()})")
            progress_bar.progress((i + 1) / len(steps))
            time.sleep(1)
            st.session_state.remediation_logs.append({
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'step': step,
                'status': 'In Progress',
                'details': f"Executing: {step}",
                'mode': mode
            })
            with log_container:
                st.markdown(f'<div class="execution-log">üìù {step} - In Progress</div>', unsafe_allow_html=True)
            
            if i == 3:  # Applying configurations
                for vuln in vulnerabilities:
                    try:
                        status = 'Success (Dry-run)'
                        details = f"Simulated fix for {vuln['title']} on {vuln['resource_name']}"
                        if mode == 'live' and self.aws_clients:
                            if vuln['id'] == 'EC2-SG-OPEN-SSH':
                                self.aws_clients['ec2'].revoke_security_group_ingress(
                                    GroupId='sg-placeholder',
                                    IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}]
                                )
                                status = 'Success (Live)'
                                details = f"Revoked open SSH access for {vuln['resource_name']}"
                            elif vuln['id'] == 'S3-PUBLIC-READ':
                                self.aws_clients['s3'].put_public_access_block(
                                    Bucket=vuln['resource_name'],
                                    PublicAccessBlockConfiguration={
                                        'BlockPublicAcls': True,
                                        'IgnorePublicAcls': True,
                                        'BlockPublicPolicy': True,
                                        'RestrictPublicBuckets': True
                                    }
                                )
                                status = 'Success (Live)'
                                details = f"Blocked public access for S3 bucket {vuln['resource_name']}"
                            elif vuln['id'] == 'RDS-PUBLIC-ACCESS':
                                self.aws_clients['rds'].modify_db_instance(
                                    DBInstanceIdentifier=vuln['resource_id'],
                                    PubliclyAccessible=False
                                )
                                status = 'Success (Live)'
                                details = f"Disabled public access for RDS {vuln['resource_name']}"
                            else:
                                status = 'Simulated Success'
                                details = f"Simulated fix for {vuln['title']}"
                        st.session_state.remediation_logs.append({
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'step': f"Remediate {vuln['title']}",
                            'status': status,
                            'details': details,
                            'mode': mode,
                            'source_tool': vuln['source_tool']
                        })
                        with log_container:
                            st.markdown(f'<div class="execution-log">‚úÖ {vuln["title"]} - {status} (Tool: {vuln["source_tool"]})</div>', unsafe_allow_html=True)
                    except Exception as e:
                        error_msg = str(e)
                        st.session_state.remediation_logs.append({
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'step': f"Remediate {vuln['title']}",
                            'status': 'Failed',
                            'details': f"Error: {error_msg}",
                            'mode': mode,
                            'source_tool': vuln['source_tool']
                        })
                        with log_container:
                            st.markdown(f'<div class="execution-log">‚ùå {vuln["title"]} - Failed: {error_msg} (Tool: {vuln["source_tool"]})</div>', unsafe_allow_html=True)
        
        status_text.text("üéâ Remediation completed!")
        st.balloons()
        st.info("Check the Execution Dashboard tab for detailed logs and status.")

def main():
    app = AWSVulnerabilityApp()
    app.display_dashboard()

if __name__ == "__main__":
    main()