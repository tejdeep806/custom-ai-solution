import streamlit as st
import boto3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
import os
from dotenv import load_dotenv
import time
import random
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import logging

# Load environment variables at the start
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set page config FIRST - this must be the first Streamlit command
st.set_page_config(
    page_title="AWS Vulnerability Remediation AI",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS - Dark theme with better contrast
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        color: #FF4B4B;
        text-align: center;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 800;
    }
    .sub-header {
        font-size: 1.4rem;
        color: #b0b0b0;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 300;
    }
    .severity-critical { 
        background: linear-gradient(135deg, #dc3545, #c82333); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(220, 53, 69, 0.3);
    }
    .severity-high { 
        background: linear-gradient(135deg, #fd7e14, #e86209); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(253, 126, 20, 0.3);
    }
    .severity-medium { 
        background: linear-gradient(135deg, #ffc107, #e0a800); 
        color: #000; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(255, 193, 7, 0.3);
    }
    .severity-low { 
        background: linear-gradient(135deg, #28a745, #218838); 
        color: white; 
        padding: 6px 12px; 
        border-radius: 20px; 
        font-weight: bold;
        font-size: 0.9rem;
        box-shadow: 2px 2px 4px rgba(40, 167, 69, 0.3);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
        border: 1px solid #4a5568;
    }
    .metric-card:hover {
        transform: translateY(-5px);
    }
    .metric-value {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 10px 0;
    }
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    
    .service-card {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        border: 1px solid #4a5568;
    }
    .service-card:hover {
        transform: translateY(-3px);
        border-color: #667eea;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }
    
    .vulnerability-card {
        background: #2d3748;
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        border-left: 5px solid;
        transition: all 0.3s ease;
        color: #e2e8f0;
        border: 1px solid #4a5568;
    }
    .vulnerability-card:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    }
    
    .remediation-step {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        padding: 20px;
        margin: 15px 0;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        color: #e2e8f0;
        border: 1px solid #4a5568;
    }
    
    .risk-assessment {
        background: linear-gradient(135deg, #553c0a 0%, #744210 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #d69e2e;
        color: #e2e8f0;
        border: 1px solid #744210;
    }
    
    .ai-insight {
        background: linear-gradient(135deg, #2c5282 0%, #2b6cb0 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #3182ce;
        color: #e2e8f0;
        border: 1px solid #2b6cb0;
    }
    
    .security-tip {
        background: linear-gradient(135deg, #22543d 0%, #276749 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #38a169;
        color: #e2e8f0;
        border: 1px solid #276749;
    }
    
    .credentials-status {
        background: linear-gradient(135deg, #2c5282 0%, #2b6cb0 100%);
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
        border-left: 4px solid #3182ce;
        text-align: center;
        color: #e2e8f0;
        border: 1px solid #2b6cb0;
    }
    
    .progress-bar {
        height: 8px;
        border-radius: 4px;
        background: #4a5568;
        margin: 10px 0;
        overflow: hidden;
    }
    .progress-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.5s ease;
    }
    
    .chart-container {
        background: #2d3748;
        padding: 20px;
        border-radius: 10px;
        margin: 15px 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        border: 1px solid #4a5568;
    }
    
    .severity-bar {
        height: 30px;
        margin: 10px 0;
        border-radius: 15px;
        display: flex;
        align-items: center;
        padding: 0 15px;
        color: white;
        font-weight: bold;
        position: relative;
    }
    .severity-bar::after {
        content: attr(data-count);
        position: absolute;
        right: 15px;
    }
    
    .service-distribution {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 15px 0;
    }
    .service-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background: #4a5568;
        border-radius: 8px;
        border-left: 4px solid #667eea;
        color: #e2e8f0;
    }

    /* Dark Theme Base Styles */
    .stApp {
        background-color: #1a202c;
    }
    
    .main .block-container {
        background-color: #1a202c;
        color: #e2e8f0;
    }
    
    .stMarkdown, .stText {
        color: #e2e8f0;
    }
    
    h1, h2, h3, h4, h5, h6 {
        color: #e2e8f0;
    }
    
    .stExpander {
        background-color: #2d3748;
        border: 1px solid #4a5568;
    }
    
    .stExpander label {
        color: #e2e8f0;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .metric-card, .service-card { 
            margin: 5px 0; 
            width: 100%; 
        }
        [data-testid="column"]:not(:first-child) { 
            margin-left: 0; 
            width: 100%; 
        }
        .severity-bar { 
            flex-direction: column; 
            text-align: center; 
        }
        .main-header {
            font-size: 2rem;
        }
    }
</style>
""", unsafe_allow_html=True)

class AWSVulnerabilityApp:
    def __init__(self):
        # Initialize session state variables
        self._initialize_session_state()
        
        # Initialize AWS clients
        self.aws_clients = self._setup_aws_clients()
    
    def _initialize_session_state(self):
        """Initialize all session state variables"""
        defaults = {
            'scan_results': None,
            'selected_vulnerabilities': [],
            'remediation_results': {},
            'ai_analysis_cache': {},
            'remediation_plan': None,
            'remediation_logs': [],
            'selected_services': ['EC2', 'EKS', 'Lambda', 'S3', 'IAM'],
            'scan_details': {},
            'execution_mode': 'dry-run',
            'dark_mode': True,
            'security_score': 85,
            'last_scan_time': None,
            'trend_data': self._generate_trend_data(),
            'service_filter': ['EC2', 'EKS', 'Lambda', 'S3', 'IAM']
        }
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value
    
    def _generate_trend_data(self):
        """Generate sample trend data for visualization"""
        dates = [(datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d') 
                for i in range(30, 0, -1)]
        return {
            'dates': dates,
            'vulnerabilities': [random.randint(5, 20) for _ in range(30)],
            'resources': [random.randint(50, 100) for _ in range(30)],
            'security_score': [random.randint(75, 95) for _ in range(30)]
        }
    
    def _setup_aws_clients(self):
        """Setup AWS clients with secrets/env fallback"""
        try:
            # Prefer Streamlit secrets
            access_key = st.secrets.get('AWS_ACCESS_KEY_ID', os.getenv('AWS_ACCESS_KEY_ID'))
            secret_key = st.secrets.get('AWS_SECRET_ACCESS_KEY', os.getenv('AWS_SECRET_ACCESS_KEY'))
            region = st.secrets.get('AWS_REGION', os.getenv('AWS_REGION', 'us-east-1'))
            
            if access_key and secret_key:
                session = boto3.Session(
                    aws_access_key_id=access_key,
                    aws_secret_access_key=secret_key,
                    region_name=region
                )
                logger.info("AWS clients initialized successfully")
                return {
                    'ec2': session.client('ec2'),
                    'eks': session.client('eks'),
                    'lambda': session.client('lambda'),
                    's3': session.client('s3'),
                    'iam': session.client('iam')
                }
            else:
                logger.warning("No AWS credentials found - demo mode")
                return None
        except Exception as e:
            logger.error(f"AWS Setup Failed: {e}")
            st.error(f"AWS Setup Failed: {e}. Falling back to demo mode.")
            return None
    
    def _generate_enhanced_sample_data(self):
        """Generate enhanced sample data with more services"""
        resources = [
            {
                'resource_id': 'i-1234567890abcdef0',
                'resource_type': 'EC2',
                'service': 'EC2',
                'name': 'web-server-production',
                'state': 'running',
                'instance_type': 't3.large',
                'public_ip': '54.210.100.50',
                'launch_time': '2024-01-15 08:30:00',
                'vulnerabilities': [
                    {
                        'id': 'EC2-PUBLIC-IP',
                        'title': 'Publicly Accessible EC2 Instance',
                        'severity': 'HIGH',
                        'description': 'EC2 instance is directly accessible from the internet with a public IP address, increasing attack surface.',
                        'remediation': 'Move instance to private subnet and use Application Load Balancer for public access.',
                        'category': 'Network Security',
                        'risk_score': 85,
                        'compliance_standards': ['CIS AWS 1.4', 'PCI DSS 1.2'],
                        'attack_vectors': ['SSH Brute Force', 'Port Scanning'],
                        'business_impact': 'High - Potential data breach and service disruption',
                        'detection_time': '2 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Medium'
                    },
                    {
                        'id': 'EC2-SG-OPEN-SSH',
                        'title': 'SSH Port Open to Internet',
                        'severity': 'CRITICAL',
                        'description': 'Security group allows SSH access from any IP address (0.0.0.0/0), enabling potential unauthorized access.',
                        'remediation': 'Restrict SSH access to specific IP ranges and implement VPN or bastion host.',
                        'category': 'Network Security',
                        'risk_score': 95,
                        'compliance_standards': ['CIS AWS 4.1', 'NIST 800-53'],
                        'attack_vectors': ['SSH Brute Force', 'Credential Stuffing'],
                        'business_impact': 'Critical - Complete system compromise possible',
                        'detection_time': '1 hour ago',
                        'exploitability': 'Very Easy',
                        'remediation_complexity': 'Low'
                    }
                ]
            },
            {
                'resource_id': 'prod-eks-cluster-01',
                'resource_type': 'EKS',
                'service': 'EKS', 
                'name': 'production-kubernetes',
                'status': 'ACTIVE',
                'version': '1.28',
                'endpoint': 'https://xyz.gr7.us-east-1.eks.amazonaws.com',
                'vulnerabilities': [
                    {
                        'id': 'EKS-LOGGING-DISABLED',
                        'title': 'Control Plane Logging Disabled',
                        'severity': 'MEDIUM',
                        'description': 'EKS control plane logging is not enabled, limiting audit capability and security monitoring.',
                        'remediation': 'Enable all control plane log types (api, audit, authenticator, scheduler) for comprehensive monitoring.',
                        'category': 'Logging & Monitoring',
                        'risk_score': 45,
                        'compliance_standards': ['CIS Kubernetes 1.2.1'],
                        'attack_vectors': ['Lack of Audit Trail'],
                        'business_impact': 'Medium - Limited visibility into cluster activities',
                        'detection_time': '5 hours ago',
                        'exploitability': 'Difficult',
                        'remediation_complexity': 'Low'
                    }
                ]
            },
            {
                'resource_id': 'data-processor-function',
                'resource_type': 'Lambda',
                'service': 'Lambda',
                'name': 'customer-data-processor',
                'runtime': 'python3.9',
                'memory_size': 512,
                'timeout': 300,
                'vulnerabilities': [
                    {
                        'id': 'LAMBDA-ENV-SECRETS',
                        'title': 'Secrets in Environment Variables',
                        'severity': 'HIGH',
                        'description': 'Lambda function stores database credentials in plaintext environment variables.',
                        'remediation': 'Migrate secrets to AWS Secrets Manager and implement secret rotation.',
                        'category': 'Data Protection',
                        'risk_score': 75,
                        'compliance_standards': ['GDPR Article 32', 'HIPAA'],
                        'attack_vectors': ['Credential Theft', 'Environment Inspection'],
                        'business_impact': 'High - Potential PII data exposure',
                        'detection_time': '3 hours ago',
                        'exploitability': 'Medium',
                        'remediation_complexity': 'Medium'
                    }
                ]
            },
            {
                'resource_id': 'customer-data-bucket',
                'resource_type': 'S3',
                'service': 'S3',
                'name': 'customer-uploads-prod',
                'creation_date': '2024-01-10',
                'vulnerabilities': [
                    {
                        'id': 'S3-PUBLIC-READ',
                        'title': 'S3 Bucket Public Read Access',
                        'severity': 'HIGH',
                        'description': 'S3 bucket allows public read access, potentially exposing sensitive customer data.',
                        'remediation': 'Enable S3 Block Public Access and review bucket policies.',
                        'category': 'Data Protection',
                        'risk_score': 80,
                        'compliance_standards': ['GDPR Article 25', 'PCI DSS 3.2'],
                        'attack_vectors': ['Data Exfiltration', 'Unauthorized Access'],
                        'business_impact': 'High - Customer data exposure risk',
                        'detection_time': '4 hours ago',
                        'exploitability': 'Easy',
                        'remediation_complexity': 'Low'
                    }
                ]
            },
            {
                'resource_id': 'admin-role',
                'resource_type': 'IAM',
                'service': 'IAM',
                'name': 'AdministratorAccessRole',
                'created_date': '2024-01-01',
                'vulnerabilities': [
                    {
                        'id': 'IAM-ADMIN-POLICY',
                        'title': 'Overly Permissive IAM Policy',
                        'severity': 'CRITICAL',
                        'description': 'IAM role has AdministratorAccess policy attached, violating principle of least privilege.',
                        'remediation': 'Replace with custom policy granting only necessary permissions.',
                        'category': 'Access Control',
                        'risk_score': 90,
                        'compliance_standards': ['CIS AWS 1.16', 'NIST 800-53'],
                        'attack_vectors': ['Privilege Escalation', 'Credential Compromise'],
                        'business_impact': 'Critical - Complete AWS account compromise risk',
                        'detection_time': '6 hours ago',
                        'exploitability': 'Medium',
                        'remediation_complexity': 'High'
                    }
                ]
            },
            {
                'resource_id': 'vpc-123456',
                'resource_type': 'VPC',
                'service': 'VPC',
                'name': 'main-vpc',
                'cidr_block': '10.0.0.0/16',
                'vulnerabilities': [
                    {
                        'id': 'VPC-FLOW-LOGS-DISABLED',
                        'title': 'VPC Flow Logs Disabled',
                        'severity': 'MEDIUM',
                        'description': 'VPC flow logs are not enabled, limiting network traffic monitoring and security analysis.',
                        'remediation': 'Enable VPC flow logs to CloudWatch Logs or S3 for network monitoring.',
                        'category': 'Logging & Monitoring',
                        'risk_score': 40,
                        'compliance_standards': ['CIS AWS 3.3', 'NIST 800-53'],
                        'attack_vectors': ['Lack of Network Visibility'],
                        'business_impact': 'Medium - Limited network security monitoring',
                        'detection_time': '8 hours ago',
                        'exploitability': 'Difficult',
                        'remediation_complexity': 'Low'
                    }
                ]
            }
        ]
        
        vulnerabilities = []
        for resource in resources:
            for vuln in resource.get('vulnerabilities', []):
                vuln_data = vuln.copy()
                vuln_data['resource_id'] = resource['resource_id']
                vuln_data['resource_type'] = resource['resource_type']
                vuln_data['resource_name'] = resource.get('name', resource['resource_id'])
                vuln_data['service'] = resource.get('service', 'Unknown')
                vulnerabilities.append(vuln_data)
        
        return resources, vulnerabilities
    
    def run_comprehensive_scan(self, selected_services):
        """Run comprehensive security scan with service filtering"""
        with st.spinner('üöÄ **Launching Comprehensive Security Assessment...**'):
            try:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                steps = [
                    "üîç Initializing security scanner...",
                    "üñ•Ô∏è Scanning EC2 instances...", 
                    "‚ò∏Ô∏è Analyzing EKS clusters...",
                    "Œª Inspecting Lambda functions...",
                    "ü™£ Checking S3 buckets...",
                    "üë§ Reviewing IAM policies...",
                    "üåê Analyzing VPC configurations...",
                    "üìä Analyzing security findings...",
                    "ü§ñ Generating AI insights..."
                ]
                
                scan_details = {}
                for i, step in enumerate(steps):
                    status_text.text(f"**{step}**")
                    progress_bar.progress((i + 1) / len(steps))
                    time.sleep(0.3)
                
                # Generate sample data and filter by selected services
                sample_resources, sample_vulns = self._generate_enhanced_sample_data()
                
                # Filter resources and vulnerabilities by selected services
                filtered_resources = [r for r in sample_resources if r['service'] in selected_services]
                filtered_vulns = [v for v in sample_vulns if v['service'] in selected_services]
                
                st.session_state.scan_results = {
                    'resources': filtered_resources,
                    'vulnerabilities': filtered_vulns,
                    'scan_time': datetime.now().isoformat(),
                    'is_demo': self.aws_clients is None,
                    'scan_details': scan_details,
                    'total_resources': len(filtered_resources)
                }
                
                st.session_state.last_scan_time = datetime.now()
                st.session_state.security_score = max(0, 100 - len(filtered_vulns) * 2)
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ **Security Assessment Complete!**")
                
                self._show_scan_summary(filtered_resources, filtered_vulns)
                
            except Exception as e:
                logger.error(f"Scan failed: {e}")
                st.error(f"‚ùå **Scan failed:** {str(e)}")
                self.run_basic_scan()
    
    def _show_scan_summary(self, resources, vulnerabilities):
        """Display enhanced scan summary"""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üìä</div>
                <div class="metric-label">Resources Scanned</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(len(resources)), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üö®</div>
                <div class="metric-label">Vulnerabilities Found</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(len(vulnerabilities)), unsafe_allow_html=True)
        
        with col3:
            critical_count = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            st.markdown("""
            <div class="metric-card">
                <div class="metric-value">üî•</div>
                <div class="metric-label">Critical Issues</div>
                <div class="metric-value">{}</div>
            </div>
            """.format(critical_count), unsafe_allow_html=True)
        
        with col4:
            security_score = st.session_state.security_score
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">üõ°Ô∏è</div>
                <div class="metric-label">Security Score</div>
                <div class="metric-value">{security_score}/100</div>
            </div>
            """, unsafe_allow_html=True)
    
    def run_basic_scan(self):
        """Basic scan with minimal sample data"""
        resources, vulnerabilities = self._generate_enhanced_sample_data()
        
        st.session_state.scan_results = {
            'resources': resources,
            'vulnerabilities': vulnerabilities,
            'scan_time': datetime.now().isoformat(),
            'is_demo': True
        }
        
        st.session_state.security_score = 78
    
    def display_dashboard(self):
        """Main dashboard with enhanced visuals"""
        st.markdown('<h1 class="main-header">üõ°Ô∏è AWS Vulnerability Remediation AI</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Enterprise Cloud Security with AI-Powered Threat Intelligence</p>', unsafe_allow_html=True)
        
        # Display security overview
        self._display_security_overview()
        
        # Main content area
        if st.session_state.scan_results is None:
            self.display_welcome()
        else:
            self.display_enhanced_results()
    
    def _display_security_overview(self):
        """Display security overview metrics with service filters"""
        col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
        
        with col1:
            # Service filter
            available_services = ['EC2', 'EKS', 'Lambda', 'S3', 'IAM', 'VPC']
            st.session_state.service_filter = st.multiselect(
                "üîß Select Services to Scan:",
                available_services,
                default=st.session_state.service_filter,
                help="Choose which AWS services to include in the security assessment"
            )
            
            if st.session_state.last_scan_time:
                last_scan = st.session_state.last_scan_time.strftime('%Y-%m-%d %H:%M')
                st.info(f"**Last Assessment:** {last_scan} | **Mode:** {'üî¨ Demo' if not self.aws_clients else 'üöÄ Live'}")
            else:
                st.info("**Ready for security assessment** | **Mode:** üî¨ Demo")
        
        with col2:
            if st.button("üîÑ Quick Scan", use_container_width=True):
                self.run_basic_scan()
                st.rerun()
        
        with col3:
            if st.button("üöÄ Full Assessment", use_container_width=True, type="primary"):
                if st.session_state.service_filter:
                    self.run_comprehensive_scan(st.session_state.service_filter)
                    st.rerun()
                else:
                    st.warning("Please select at least one service to scan")
        
        with col4:
            if st.button("üóëÔ∏è Clear Results", use_container_width=True):
                st.session_state.scan_results = None
                st.session_state.selected_vulnerabilities = []
                st.session_state.remediation_plan = None
                st.rerun()
    
    def display_welcome(self):
        """Enhanced welcome screen with dark theme"""
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("""
            <div style='text-align: center; padding: 20px;'>
                <h2 style='color: #e2e8f0; margin-bottom: 10px;'>üîç Comprehensive Cloud Security</h2>
                <p style='color: #b0b0b0; font-size: 1.1rem;'>AI-powered vulnerability detection and automated remediation for your AWS environment</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Enhanced service cards
            st.subheader("üéØ Protected Services")
            services = [
                ("üñ•Ô∏è", "EC2", "Compute Security", "Instances, AMIs, Security Groups"),
                ("‚ò∏Ô∏è", "EKS", "Kubernetes Security", "Clusters, Pods, RBAC"),
                ("Œª", "Lambda", "Serverless Security", "Functions, Permissions, Runtime"),
                ("ü™£", "S3", "Storage Security", "Buckets, Encryption, Access"),
                ("üë§", "IAM", "Access Security", "Users, Roles, Policies"),
                ("üåê", "VPC", "Network Security", "Subnets, NACLs, Flow Logs")
            ]
            
            # Display services in a 3x2 grid
            cols = st.columns(3)
            for i, (icon, name, title, desc) in enumerate(services):
                with cols[i % 3]:
                    st.markdown(f"""
                    <div class="service-card">
                        <h3 style='margin: 0; font-size: 2rem;'>{icon}</h3>
                        <h4 style='margin: 5px 0; color: #e2e8f0;'>{name}</h4>
                        <p style='margin: 5px 0; font-weight: 600; color: #e2e8f0;'>{title}</p>
                        <small style='opacity: 0.9; color: #b0b0b0;'>{desc}</small>
                    </div>
                    """, unsafe_allow_html=True)
        
        with col2:
            # Security insights and AI features
            st.markdown("""
            <div class="ai-insight">
                <h3 style='color: #e2e8f0; margin-bottom: 15px;'>ü§ñ AI-Powered Security</h3>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üîç</span>
                    <span style='color: #e2e8f0;'>Intelligent Vulnerability Detection</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>‚ö°</span>
                    <span style='color: #e2e8f0;'>Automated Remediation Plans</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üìä</span>
                    <span style='color: #e2e8f0;'>Risk-Based Prioritization</span>
                </div>
                <div style='display: flex; align-items: center; margin: 10px 0;'>
                    <span style='font-size: 1.5rem; margin-right: 10px;'>üõ°Ô∏è</span>
                    <span style='color: #e2e8f0;'>Compliance Monitoring</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Quick start actions
            st.markdown("""
            <div class="security-tip">
                <h4 style='color: #e2e8f0;'>üöÄ Get Started</h4>
                <p style='color: #e2e8f0;'>Run a security assessment to discover vulnerabilities and get AI-powered remediation guidance.</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Service selection for initial scan
            available_services = ['EC2', 'EKS', 'Lambda', 'S3', 'IAM', 'VPC']
            selected_services = st.multiselect(
                "Select services to scan:",
                available_services,
                default=['EC2', 'EKS', 'Lambda'],
                help="Choose which AWS services to include in the security assessment"
            )
            
            if st.button("üéØ Start Security Assessment", use_container_width=True, type="primary"):
                if selected_services:
                    self.run_comprehensive_scan(selected_services)
                    st.rerun()
                else:
                    st.warning("Please select at least one service to scan")
    
    def display_enhanced_results(self):
        """Display enhanced results with tabs and visualizations"""
        resources = st.session_state.scan_results['resources']
        vulnerabilities = st.session_state.scan_results['vulnerabilities']
        
        # Create tabs for different views
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
            "üìä Dashboard", 
            "üö® Vulnerabilities", 
            "üîß Resources", 
            "ü§ñ AI Analysis",
            "‚ö° Remediation",
            "üìà Execution Dashboard"
        ])
        
        with tab1:
            self._display_dashboard_tab(resources, vulnerabilities)
        
        with tab2:
            self._display_vulnerabilities_tab(vulnerabilities)
        
        with tab3:
            self._display_resources_tab(resources)
        
        with tab4:
            self._display_ai_analysis_tab(vulnerabilities)
        
        with tab5:
            self._display_remediation_tab(vulnerabilities)
        
        with tab6:
            self._display_execution_dashboard()
    
    def _display_execution_dashboard(self):
        """Dashboard to show execution status and logs"""
        st.header("üìà Execution Dashboard")
        
        if not st.session_state.remediation_logs:
            st.info("No remediation executions yet. Run a remediation plan to see status here.")
            return
        
        # Display logs as table
        logs_df = pd.DataFrame(st.session_state.remediation_logs)
        st.dataframe(logs_df, use_container_width=True)
        
        # Simple chart of status counts
        if not logs_df.empty:
            status_counts = logs_df['status'].value_counts()
            fig = px.pie(status_counts, values=status_counts.values, names=status_counts.index,
                         title="Remediation Status Distribution")
            st.plotly_chart(fig, use_container_width=True)
        
        # Clear logs button
        if st.button("üóëÔ∏è Clear Logs"):
            st.session_state.remediation_logs = []
            st.rerun()
    
    def _display_dashboard_tab(self, resources, vulnerabilities):
        """Enhanced dashboard with visualizations"""
        st.header("üìä Security Dashboard")
        
        # Top metrics row
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            self._create_metric_card("üìà", "Resources", len(resources), "#4a5568")
        with col2:
            self._create_metric_card("üö®", "Vulnerabilities", len(vulnerabilities), "#e53e3e")
        with col3:
            critical = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            self._create_metric_card("üî•", "Critical", critical, "#c53030")
        with col4:
            self._create_metric_card("üõ°Ô∏è", "Security Score", f"{st.session_state.security_score}/100", "#38a169")
        
        # Charts and visualizations
        col1, col2 = st.columns(2)
        
        with col1:
            self._create_severity_chart(vulnerabilities)
        
        with col2:
            self._create_service_distribution_chart(resources)
        
        # Trend chart
        st.subheader("üìà Security Trends (Last 30 Days)")
        trend_df = pd.DataFrame(st.session_state.trend_data)
        fig = px.line(trend_df, x='dates', y=['vulnerabilities', 'security_score'], 
                      title="Vulnerabilities & Score Over Time",
                      labels={'value': 'Count/Score', 'dates': 'Date'})
        st.plotly_chart(fig, use_container_width=True)
        
        # AI Insights
        st.markdown("---")
        st.subheader("ü§ñ AI Security Insights")
        
        insights = [
            "**üîç Pattern Detection:** Multiple EC2 instances with public IPs detected. Consider implementing a bastion host pattern.",
            "**‚ö° Quick Wins:** 3 critical vulnerabilities can be remediated automatically with minimal impact.",
            "**üìà Trend Analysis:** Security score improved by 12% compared to last assessment.",
            "**üõ°Ô∏è Recommendations:** Enable AWS Security Hub for continuous monitoring and automated compliance checks.",
            "**üí∞ Cost Impact:** Remediating these issues could prevent potential losses of ~$50K annually.",
            "**‚è±Ô∏è Time to Remediate:** Estimated 2.5 hours for all critical and high severity issues."
        ]
        
        for insight in insights:
            st.markdown(f"""
            <div class="ai-insight">
                <p style='color: #e2e8f0;'>{insight}</p>
            </div>
            """, unsafe_allow_html=True)
    
    def _create_metric_card(self, icon, label, value, color):
        """Create a metric card"""
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value" style="font-size: 2rem;">{icon}</div>
            <div class="metric-label">{label}</div>
            <div class="metric-value" style="font-size: 2.2rem;">{value}</div>
        </div>
        """, unsafe_allow_html=True)
    
    def _create_severity_chart(self, vulnerabilities):
        """Create severity distribution chart with Plotly"""
        severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
        for vuln in vulnerabilities:
            severity_counts[vuln['severity']] += 1
        
        if sum(severity_counts.values()) == 0:
            st.info("No vulnerabilities found")
            return
        
        fig = px.pie(values=severity_counts.values(), names=severity_counts.keys(),
                     title="Vulnerability Severity Distribution",
                     color_discrete_map={'CRITICAL': '#e53e3e', 'HIGH': '#dd6b20', 
                                         'MEDIUM': '#d69e2e', 'LOW': '#38a169'})
        st.plotly_chart(fig, use_container_width=True)
    
    def _create_service_distribution_chart(self, resources):
        """Create service distribution chart with Plotly"""
        service_counts = {}
        for resource in resources:
            service = resource['service']
            service_counts[service] = service_counts.get(service, 0) + 1
        
        fig = px.bar(x=list(service_counts.keys()), y=list(service_counts.values()),
                     title="Resources by Service",
                     color=list(service_counts.keys()),
                     color_discrete_map={'EC2': '#4a5568', 'EKS': '#2d3748', 'Lambda': '#744210', 
                                         'S3': '#22543d', 'IAM': '#2c5282', 'VPC': '#553c0a'})
        st.plotly_chart(fig, use_container_width=True)
    
    def _display_vulnerabilities_tab(self, vulnerabilities):
        """Display vulnerabilities with enhanced details and service filtering"""
        st.header("üö® Security Vulnerabilities")
        
        if not vulnerabilities:
            st.success("üéâ No vulnerabilities found! Your AWS environment is secure.")
            return
        
        # Filters
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            # Service filter
            services = list(set([v['service'] for v in vulnerabilities]))
            selected_services = st.multiselect(
                "Filter by Service:",
                services,
                default=services
            )
        
        with col2:
            # Severity filter
            severities = list(set([v['severity'] for v in vulnerabilities]))
            selected_severities = st.multiselect(
                "Filter by Severity:",
                severities,
                default=severities
            )
        
        with col3:
            # Search
            search_term = st.text_input("Search:", placeholder="Title or description...")
        
        # Apply filters
        filtered_vulns = [v for v in vulnerabilities 
                         if v['service'] in selected_services 
                         and v['severity'] in selected_severities
                         and (not search_term or search_term.lower() in v['title'].lower() or search_term.lower() in v['description'].lower())]
        
        st.write(f"**Showing {len(filtered_vulns)} of {len(vulnerabilities)} vulnerabilities**")
        
        for idx, vuln in enumerate(filtered_vulns):
            border_color = {
                'CRITICAL': '#e53e3e',
                'HIGH': '#dd6b20', 
                'MEDIUM': '#d69e2e',
                'LOW': '#38a169'
            }.get(vuln['severity'], '#666')
            
            severity_text_color = {
                'CRITICAL': '#ffffff',
                'HIGH': '#ffffff',
                'MEDIUM': '#000000',
                'LOW': '#000000'
            }.get(vuln['severity'], '#ffffff')
            
            st.markdown(f"""
            <div class="vulnerability-card" style="border-left-color: {border_color};">
                <div style="display: flex; justify-content: between; align-items: start;">
                    <div style="flex: 1;">
                        <h3 style="margin: 0 0 10px 0; color: #e2e8f0; font-weight: 600;">{vuln['title']}</h3>
                        <div style="display: flex; gap: 15px; margin-bottom: 10px; flex-wrap: wrap;">
                            <span class="severity-{vuln['severity'].lower()}" style="background: {border_color}; color: {severity_text_color}; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; font-weight: bold;">
                                {vuln['severity']}
                            </span>
                            <span style="background: #4a5568; color: #e2e8f0; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; border: 1px solid #718096;">
                                {vuln['service']} - {vuln['resource_name']}
                            </span>
                            <span style="background: #744210; color: #e2e8f0; padding: 4px 12px; border-radius: 15px; font-size: 0.9rem; border: 1px solid #d69e2e;">
                                ‚è±Ô∏è {vuln.get('detection_time', 'Recently')}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div style="margin: 15px 0;">
                    <p style="margin: 0; color: #e2e8f0; line-height: 1.5; background: #4a5568; padding: 12px; border-radius: 6px;">{vuln['description']}</p>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0;">
                    <div style="background: #4a5568; padding: 12px; border-radius: 6px;">
                        <strong style="color: #e2e8f0;">üîÑ Remediation:</strong>
                        <p style="margin: 5px 0; color: #c6f6d5; background: #22543d; padding: 8px; border-radius: 4px; border-left: 3px solid #38a745;">{vuln['remediation']}</p>
                    </div>
                    <div style="background: #4a5568; padding: 12px; border-radius: 6px;">
                        <strong style="color: #e2e8f0;">üìã Category:</strong>
                        <p style="margin: 5px 0; color: #e2e8f0;">{vuln['category']}</p>
                        <strong style="color: #e2e8f0;">üéØ Exploitability:</strong>
                        <p style="margin: 5px 0; color: #e2e8f0;">{vuln.get('exploitability', 'Medium')}</p>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div style="background: #4a5568; padding: 12px; border-radius: 6px;">
                        <strong style="color: #e2e8f0;">üéØ Risk Score:</strong>
                        <div class="progress-bar" style="background: #718096; border-radius: 10px; height: 8px; margin: 8px 0;">
                            <div class="progress-fill" style="width: {vuln.get('risk_score', 50)}%; background: {border_color}; height: 100%; border-radius: 10px;"></div>
                        </div>
                        <small style="color: #e2e8f0;">{vuln.get('risk_score', 50)}/100</small>
                    </div>
                    <div style="background: #4a5568; padding: 12px; border-radius: 6px;">
                        <strong style="color: #e2e8f0;">üìä Compliance:</strong>
                        <p style="margin: 5px 0; font-size: 0.9rem; color: #e2e8f0;">
                            {', '.join(vuln.get('compliance_standards', ['N/A']))}
                        </p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Action buttons
            col1, col2, col3 = st.columns([2, 1, 1])
            with col1:
                if st.button(f"ü§ñ Analyze with AI", key=f"analyze_{idx}"):
                    if vuln not in st.session_state.selected_vulnerabilities:
                        st.session_state.selected_vulnerabilities.append(vuln)
                        st.success(f"‚úÖ Added to AI analysis queue!")
            with col2:
                if st.button(f"‚≠ê Select for Remediation", key=f"select_{idx}"):
                    if vuln not in st.session_state.selected_vulnerabilities:
                        st.session_state.selected_vulnerabilities.append(vuln)
                        st.success(f"‚úÖ Selected for remediation!")
            with col3:
                if st.button("üìã View Details", key=f"details_{idx}"):
                    st.json(vuln, expanded=False)
            
            st.markdown("---")
    
    def _display_resources_tab(self, resources):
        """Display resources with enhanced details"""
        st.header("üîß AWS Resources")
        
        # Service filter for resources
        services = list(set([r['service'] for r in resources]))
        selected_services = st.multiselect(
            "Filter resources by service:",
            services,
            default=services,
            key="resource_service_filter"
        )
        
        filtered_resources = [r for r in resources if r['service'] in selected_services]
        
        for resource in filtered_resources:
            with st.expander(f"{resource['service']} - {resource.get('name', resource['resource_id'])}", expanded=False):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**üìã Basic Information**")
                    st.write(f"**Resource ID:** `{resource['resource_id']}`")
                    st.write(f"**Type:** {resource['resource_type']}")
                    st.write(f"**Service:** {resource['service']}")
                    st.write(f"**Name:** {resource.get('name', 'Unnamed')}")
                    
                    if resource.get('state'):
                        st.write(f"**State:** {resource['state']}")
                    if resource.get('status'):
                        st.write(f"**Status:** {resource['status']}")
                
                with col2:
                    st.write("**üîß Configuration**")
                    if resource['resource_type'] == 'EC2':
                        st.write(f"**Instance Type:** {resource.get('instance_type', 'N/A')}")
                        st.write(f"**Public IP:** {resource.get('public_ip', 'Not assigned')}")
                    elif resource['resource_type'] == 'EKS':
                        st.write(f"**Version:** {resource.get('version', 'N/A')}")
                        st.write(f"**Endpoint:** {resource.get('endpoint', 'N/A')}")
                    elif resource['resource_type'] == 'Lambda':
                        st.write(f"**Runtime:** {resource.get('runtime', 'N/A')}")
                        st.write(f"**Memory:** {resource.get('memory_size', 'N/A')} MB")
                    elif resource['resource_type'] == 'S3':
                        st.write(f"**Creation Date:** {resource.get('creation_date', 'N/A')}")
                    elif resource['resource_type'] == 'IAM':
                        st.write(f"**Created Date:** {resource.get('created_date', 'N/A')}")
                    elif resource['resource_type'] == 'VPC':
                        st.write(f"**CIDR Block:** {resource.get('cidr_block', 'N/A')}")
                
                # Vulnerabilities section
                if resource.get('vulnerabilities'):
                    st.write("**üö® Security Findings**")
                    for vuln in resource['vulnerabilities']:
                        severity_class = f"severity-{vuln['severity'].lower()}"
                        border_color = {
                            'CRITICAL': '#e53e3e',
                            'HIGH': '#dd6b20',
                            'MEDIUM': '#d69e2e',
                            'LOW': '#38a169'
                        }.get(vuln['severity'], '#666')
                        
                        st.markdown(f"""
                        <div style="border-left: 4px solid {border_color}; padding: 10px; margin: 5px 0; background: #4a5568; border-radius: 5px;">
                            <strong style="color: #e2e8f0;">{vuln['title']}</strong> - <span class="{severity_class}">{vuln['severity']}</span><br>
                            <small style="color: #e2e8f0;">{vuln['description']}</small>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.success("‚úÖ No vulnerabilities detected")
    
    def _display_ai_analysis_tab(self, vulnerabilities):
        """Display AI-powered analysis"""
        st.header("ü§ñ AI Security Analysis")
        
        if not vulnerabilities:
            st.info("Run a security scan to get AI-powered analysis.")
            return
        
        selected_vulns = st.session_state.selected_vulnerabilities
        
        if not selected_vulns:
            st.info("Select vulnerabilities from the Vulnerabilities tab for AI analysis.")
            
            # Quick analysis option
            st.subheader("üöÄ Quick Analysis")
            quick_vuln = st.selectbox(
                "Select a vulnerability for instant AI analysis:",
                options=vulnerabilities,
                format_func=lambda x: f"{x['severity']} - {x['title']} - {x['resource_name']}"
            )
            
            if quick_vuln and st.button("ü§ñ Analyze This Vulnerability"):
                self._display_ai_analysis_results(quick_vuln)
            return
        
        # Display analysis for selected vulnerabilities
        st.subheader("üìã Selected for AI Analysis")
        
        for idx, vuln in enumerate(selected_vulns):
            st.markdown(f"**{vuln['title']}** - `{vuln['resource_name']}`")
            
            if st.button(f"üß† Run AI Analysis", key=f"run_ai_{idx}"):
                self._display_ai_analysis_results(vuln)
            
            if st.button(f"‚ùå Remove", key=f"remove_ai_{idx}"):
                st.session_state.selected_vulnerabilities.remove(vuln)
                st.rerun()
            
            st.markdown("---")
    
    def _display_ai_analysis_results(self, vulnerability):
        """Display detailed AI analysis results"""
        st.markdown(f"### ü§ñ AI Analysis: {vulnerability['title']}")
        
        # Risk Assessment
        st.markdown("""
        <div class="risk-assessment">
            <h4 style='color: #e2e8f0;'>üìà Risk Assessment</h4>
            <p style='color: #e2e8f0;'><strong>Overall Risk Score:</strong> {}/100</p>
            <p style='color: #e2e8f0;'><strong>Business Impact:</strong> {}</p>
            <p style='color: #e2e8f0;'><strong>Attack Vectors:</strong> {}</p>
            <p style='color: #e2e8f0;'><strong>Exploitation Likelihood:</strong> High (Based on current configuration)</p>
        </div>
        """.format(
            vulnerability.get('risk_score', 75),
            vulnerability.get('business_impact', 'Medium'),
            ', '.join(vulnerability.get('attack_vectors', ['Multiple']))
        ), unsafe_allow_html=True)
        
        # Remediation Steps
        st.markdown("#### üõ†Ô∏è Detailed Remediation Plan")
        
        remediation_steps = [
            "1. **Immediate Action:** " + vulnerability['remediation'],
            "2. **Security Hardening:** Implement additional security controls based on AWS best practices",
            "3. **Monitoring:** Set up CloudWatch alarms and GuardDuty for continuous monitoring",
            "4. **Validation:** Verify remediation effectiveness through security testing",
            "5. **Documentation:** Update security documentation and runbooks"
        ]
        
        for step in remediation_steps:
            st.markdown(f"""
            <div class="remediation-step">
                <p style='color: #e2e8f0;'>{step}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # AWS Commands
        st.markdown("#### üíª AWS CLI Commands")
        
        commands = {
            'EC2-PUBLIC-IP': [
                "# Move instance to private subnet",
                "aws ec2 modify-instance-attribute --instance-id {} --no-associate-public-ip-address".format(vulnerability['resource_id']),
                "",
                "# Update security groups to restrict access",
                "# aws ec2 modify-security-group-rules --group-id sg-xxx --security-group-rules ..."
            ],
            'EC2-SG-OPEN-SSH': [
                "# Revoke open SSH access",
                "# aws ec2 revoke-security-group-ingress --group-id sg-xxx --protocol tcp --port 22 --cidr 0.0.0.0/0",
                "",
                "# Authorize specific IP ranges",
                "# aws ec2 authorize-security-group-ingress --group-id sg-xxx --protocol tcp --port 22 --cidr 192.168.1.0/24"
            ],
            'LAMBDA-ENV-SECRETS': [
                "# Create secret in Secrets Manager",
                'aws secretsmanager create-secret --name {}-creds --secret-string \'{{"username":"admin","password":"secret"}}\''.format(vulnerability['resource_name']),
                "",
                "# Update Lambda function to use Secrets Manager",
                "# aws lambda update-function-configuration --function-name {} --environment Variables={{DB_SECRET_ARN=arn:aws:secretsmanager:region:account:secret:{}-creds}}".format(vulnerability['resource_name'], vulnerability['resource_name'])
            ],
            'S3-PUBLIC-READ': [
                "# Enable S3 Block Public Access",
                "aws s3api put-public-access-block --bucket {} --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true".format(vulnerability['resource_name']),
                "",
                "# Verify bucket policy",
                "aws s3api get-bucket-policy --bucket {}".format(vulnerability['resource_name'])
            ],
            'IAM-ADMIN-POLICY': [
                "# Create custom policy with least privilege",
                "# aws iam create-policy --policy-name CustomAppPolicy --policy-document file://custom-policy.json",
                "",
                "# Attach custom policy to role",
                "# aws iam attach-role-policy --role-name {} --policy-arn arn:aws:iam::account:policy/CustomAppPolicy".format(vulnerability['resource_name']),
                "",
                "# Detach admin policy",
                "# aws iam detach-role-policy --role-name {} --policy-arn arn:aws:iam::aws:policy/AdministratorAccess".format(vulnerability['resource_name'])
            ]
        }
        
        cmd_list = commands.get(vulnerability['id'], [
            "# Specific commands would be generated based on the vulnerability",
            "# aws {} update-configuration --resource {}".format(vulnerability['service'].lower(), vulnerability['resource_id']),
            "# Additional configuration commands..."
        ])
        
        for cmd in cmd_list:
            if cmd.startswith("#"):
                st.write(cmd)
            else:
                st.code(cmd, language='bash')
        
        # AI Insights
        st.markdown("#### üîÆ AI Security Insights")
        
        insights = [
            "**Pattern Recognition:** This vulnerability pattern is commonly found in {} of AWS environments.".format(random.randint(15, 40)),
            "**Trend Analysis:** Similar configurations have led to security incidents in the past 6 months.",
            "**Best Practice:** AWS recommends {} for this service.".format(
                "private subnets with NAT gateways" if vulnerability['service'] == 'EC2' 
                else "secret management via Secrets Manager" if vulnerability['service'] == 'Lambda'
                else "enabled control plane logging" if vulnerability['service'] == 'EKS'
                else "least privilege IAM policies" if vulnerability['service'] == 'IAM'
                else "block public access" if vulnerability['service'] == 'S3'
                else "enabled flow logs"
            ),
            "**Cost Impact:** Remediation may reduce potential financial impact from security incidents by ~${}k/year".format(random.randint(10, 50))
        ]
        
        for insight in insights:
            st.markdown(f"""
            <div class="ai-insight">
                <p style='color: #e2e8f0;'>{insight}</p>
            </div>
            """, unsafe_allow_html=True)
    
    def _display_remediation_tab(self, vulnerabilities):
        """Enhanced remediation hub"""
        st.header("‚ö° Remediation Hub")
        
        selected_vulns = st.session_state.selected_vulnerabilities
        
        if not selected_vulns:
            st.info("üéØ Select vulnerabilities from the Vulnerabilities tab to begin remediation planning.")
            return
        
        # Remediation overview
        st.subheader("üìã Remediation Overview")
        
        total_risk = sum([v.get('risk_score', 50) for v in selected_vulns])
        critical_count = len([v for v in selected_vulns if v['severity'] in ['CRITICAL', 'HIGH']])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Selected Items", len(selected_vulns))
        with col2:
            st.metric("Total Risk Score", total_risk)
        with col3:
            st.metric("Critical/High", critical_count)
        
        # Selected vulnerabilities
        st.subheader("üéØ Selected for Remediation")
        
        for idx, vuln in enumerate(selected_vulns):
            col1, col2, col3 = st.columns([4, 1, 1])
            with col1:
                severity_class = f"severity-{vuln['severity'].lower()}"
                st.markdown(f"""
                **{vuln['title']}** 
                - `{vuln['resource_name']}` 
                - <span class='{severity_class}'>{vuln['severity']}</span>
                - Risk: {vuln.get('risk_score', 50)}/100
                """, unsafe_allow_html=True)
            with col2:
                if st.button("üìã Plan", key=f"plan_{idx}"):
                    st.session_state.remediation_plan = self._generate_remediation_plan([vuln])
                    st.success("Remediation plan generated!")
            with col3:
                if st.button("üóëÔ∏è Remove", key=f"remove_{idx}"):
                    st.session_state.selected_vulnerabilities.remove(vuln)
                    st.rerun()
        
        # Remediation actions
        st.subheader("üöÄ Remediation Actions")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìã Generate Plan", use_container_width=True):
                st.session_state.remediation_plan = self._generate_remediation_plan(selected_vulns)
                st.success("‚úÖ Comprehensive remediation plan generated! See below for details.")
        
        with col2:
            if st.button("üîç Preview Changes", use_container_width=True):
                self._preview_remediation_changes(selected_vulns)
        
        with col3:
            execution_mode = st.selectbox(
                "Execution Mode:",
                ["dry-run", "live"],
                key="execution_mode_select"
            )
            st.session_state.execution_mode = execution_mode
            
            if st.button("‚ö° Execute Plan", use_container_width=True, type="primary"):
                self._execute_remediation(selected_vulns)
        
        # Improved plan display
        if st.session_state.remediation_plan:
            st.subheader("üìÑ Generated Remediation Plan")
            plan = st.session_state.remediation_plan
            st.markdown(f"**Timestamp:** {plan['timestamp']}")
            st.markdown(f"**Vulnerabilities:** {', '.join(plan['vulnerabilities'])}")
            st.markdown(f"**Estimated Duration:** {plan['estimated_duration']}")
            st.markdown(f"**Risk Level:** {plan['risk_level']}")
            
            st.subheader("Steps")
            for step in plan['steps']:
                with st.expander(step['action']):
                    st.markdown(f"**Resource:** {step['resource']}")
                    st.markdown(f"**Estimated Time:** {step['estimated_time']}")
                    st.markdown(f"**Risk:** {step['risk']}")
                    st.markdown("**Commands:**")
                    for cmd in step['commands']:
                        st.code(cmd, language='bash')
        
        # CSV download
        st.subheader("üìä Export Remediation Data")
        st.info("Download a CSV file containing details of selected vulnerabilities for offline review or sharing.")
        df = pd.DataFrame(selected_vulns)
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• Download CSV",
            data=csv,
            file_name=f"remediation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            help="Exports selected vulnerabilities including title, severity, description, etc."
        )
        if st.button("üìÑ View Preview Before Download"):
            st.dataframe(df)
    
    def _generate_remediation_plan(self, vulnerabilities):
        """Generate detailed remediation plan"""
        steps = []
        
        for v in vulnerabilities:
            # Generate appropriate commands based on vulnerability type
            if v['id'] == 'EC2-PUBLIC-IP':
                commands = [
                    "# Move instance to private subnet",
                    "aws ec2 modify-instance-attribute --instance-id {} --no-associate-public-ip-address".format(v['resource_id']),
                    "",
                    "# Update security groups to restrict access",
                    "# aws ec2 modify-security-group-rules --group-id sg-xxx --security-group-rules ..."
                ]
            elif v['id'] == 'EC2-SG-OPEN-SSH':
                commands = [
                    "# Revoke open SSH access",
                    "# aws ec2 revoke-security-group-ingress --group-id sg-xxx --protocol tcp --port 22 --cidr 0.0.0.0/0",
                    "",
                    "# Authorize specific IP ranges",
                    "# aws ec2 authorize-security-group-ingress --group-id sg-xxx --protocol tcp --port 22 --cidr 192.168.1.0/24"
                ]
            elif v['id'] == 'LAMBDA-ENV-SECRETS':
                commands = [
                    "# Create secret in Secrets Manager",
                    'aws secretsmanager create-secret --name {}-creds --secret-string \'{{"username":"admin","password":"secret"}}\''.format(v['resource_name']),
                    "",
                    "# Update Lambda function to use Secrets Manager",
                    "# aws lambda update-function-configuration --function-name {} --environment Variables={{DB_SECRET_ARN=arn:aws:secretsmanager:region:account:secret:{}-creds}}".format(v['resource_name'], v['resource_name'])
                ]
            elif v['id'] == 'S3-PUBLIC-READ':
                commands = [
                    "# Enable S3 Block Public Access",
                    "aws s3api put-public-access-block --bucket {} --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true".format(v['resource_name']),
                    "",
                    "# Verify bucket policy",
                    "aws s3api get-bucket-policy --bucket {}".format(v['resource_name'])
                ]
            elif v['id'] == 'IAM-ADMIN-POLICY':
                commands = [
                    "# Create custom policy with least privilege",
                    "# aws iam create-policy --policy-name CustomAppPolicy --policy-document file://custom-policy.json",
                    "",
                    "# Attach custom policy to role",
                    "# aws iam attach-role-policy --role-name {} --policy-arn arn:aws:iam::account:policy/CustomAppPolicy".format(v['resource_name']),
                    "",
                    "# Detach admin policy",
                    "# aws iam detach-role-policy --role-name {} --policy-arn arn:aws:iam::aws:policy/AdministratorAccess".format(v['resource_name'])
                ]
            elif v['id'] == 'VPC-FLOW-LOGS-DISABLED':
                commands = [
                    "# Enable VPC Flow Logs",
                    "# aws ec2 create-flow-logs --resource-type VPC --resource-ids {} --traffic-type ALL --log-destination-type cloud-watch-logs --log-group-name VPCFlowLogs".format(v['resource_id']),
                    "",
                    "# Create CloudWatch log group if needed",
                    "# aws logs create-log-group --log-group-name VPCFlowLogs"
                ]
            elif v['id'] == 'EKS-LOGGING-DISABLED':
                commands = [
                    "# Enable EKS control plane logging",
                    "aws eks update-cluster-config --name {} --logging '{{""enableTypes"":[""api"",""audit"",""authenticator"",""controllerManager"",""scheduler""]}}'".format(v['resource_name']),
                    "",
                    "# Wait for cluster update to complete",
                    "aws eks wait cluster-active --name {}".format(v['resource_name'])
                ]
            else:
                commands = [
                    "# Generic remediation commands",
                    "# aws {} update-configuration --resource {}".format(v['service'].lower(), v['resource_id']),
                    "# Additional configuration commands..."
                ]
            
            steps.append({
                'action': f"Remediate {v['title']}",
                'resource': v['resource_name'],
                'estimated_time': '15-30 minutes',
                'risk': v['severity'],
                'commands': commands
            })
        
        return {
            'timestamp': datetime.now().isoformat(),
            'vulnerabilities': [v['id'] for v in vulnerabilities],
            'estimated_duration': f"{len(vulnerabilities) * 20} minutes",
            'risk_level': 'High' if any(v['severity'] in ['CRITICAL', 'HIGH'] for v in vulnerabilities) else 'Medium',
            'steps': steps
        }
    
    def _preview_remediation_changes(self, vulnerabilities):
        """Preview remediation changes"""
        st.subheader("üîç Change Preview")
        
        for vuln in vulnerabilities:
            with st.expander(f"Changes for {vuln['title']}"):
                st.markdown(f"""
                **Resource:** {vuln['resource_name']} ({vuln['resource_id']})
                **Current State:** Vulnerable - {vuln['description']}
                **Target State:** Secured - {vuln['remediation']}
                **Impact:** Low - No service disruption expected
                **Rollback:** Automated rollback available
                """)
    
    def _execute_remediation(self, vulnerabilities):
        """Execute remediation with real-time status updates and logging"""
        mode = st.session_state.execution_mode
        if mode == 'live':
            confirm = st.checkbox("I confirm to make real changes (uncheck to cancel)")
            if not confirm:
                st.warning("Live remediation cancelled.")
                return
        
        # Clear previous logs
        st.session_state.remediation_logs = []
        
        st.subheader("Execution Progress")
        progress_bar = st.progress(0)
        status_text = st.empty()
        log_container = st.container()
        
        steps = [
            "üîÑ Initializing remediation engine...",
            "üìã Validating remediation plan...",
            "üîí Creating backup snapshots...",
            "‚ö° Applying security configurations...",
            "‚úÖ Verifying changes...",
            "üìä Generating compliance report..."
        ]
        
        for i, step in enumerate(steps):
            status_text.text(f"**{step}** ({mode.capitalize()})")
            progress_bar.progress((i + 1) / len(steps))
            time.sleep(1)  # Simulate work
            
            # Log entry
            st.session_state.remediation_logs.append({
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'step': step,
                'status': 'In Progress',
                'mode': mode
            })
            
            with log_container:
                st.info(f"üìù {step} - In Progress")
            
            if i == 3:  # Applying configurations
                for vuln in vulnerabilities:
                    try:
                        if mode == 'live' and self.aws_clients:
                            # Real remediation - example for EC2 open SSH
                            if vuln['id'] == 'EC2-SG-OPEN-SSH':
                                # Placeholder - replace with actual group ID from resource
                                status = 'Success (Live - Simulated)'
                            elif vuln['id'] == 'S3-PUBLIC-READ':
                                status = 'Success (Live - Simulated)'
                            else:
                                status = 'Success (Live - Simulated)'
                        else:
                            status = 'Success (Dry-run)'
                        
                        st.session_state.remediation_logs.append({
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'step': f"Remediate {vuln['title']}",
                            'status': status,
                            'mode': mode,
                            'details': f"Applied to {vuln['resource_name']}"
                        })
                        with log_container:
                            st.success(f"‚úÖ {vuln['title']} - {status}")
                    except Exception as e:
                        error_msg = str(e)
                        st.session_state.remediation_logs.append({
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'step': f"Remediate {vuln['title']}",
                            'status': 'Failed',
                            'mode': mode,
                            'details': error_msg
                        })
                        with log_container:
                            st.error(f"‚ùå {vuln['title']} - Failed: {error_msg}")
        
        status_text.text("üéâ Remediation completed!")
        st.balloons()
        
        st.info("Execution complete. Check the Execution Dashboard tab for full logs and status.")

def main():
    app = AWSVulnerabilityApp()
    app.display_dashboard()

if __name__ == "__main__":
    main()